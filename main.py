# -*- coding: utf-8 -*-
import os
try:
  import telebot, asyncio, aiohttp
  from telebot import TeleBot, types
  import time, pathlib, sys, logging
  import random, os
  from config import *
  from qrcode import make as create_qr
  import string, requests, threading
  from gtts import gTTS
  import io
  from telebot.util import quick_markup
  from PIL import Image, ImageDraw, ImageFont, ImageOps
  from bs4 import BeautifulSoup
  from googleapiclient.discovery import build
  from pytubefix import Channel, YouTube, Search
  import faker as faker_
  from datetime import date
  from email.mime.multipart import MIMEMultipart
  from email.mime.text import MIMEText
  import smtplib
  import hashlib
  from virus_total_apis import PublicApi as VirusTotalPublicApi
  import speech_recognition as sr
  import subprocess
  from vkpymusic import Service, TokenReceiver, Song
  import vk_api
  from googletrans import Translator
  import zipfile, shutil
  from selenium import webdriver
  from selenium.webdriver.common.by import By
  from selenium.webdriver.chrome.service import Service as Service1
  from selenium.webdriver.chrome.options import Options
  from webdriver_manager.chrome import ChromeDriverManager
  from tqdm.asyncio import tqdm
  import numpy
  import cv2
  from yoloface import face_analysis
  from mcstatus import JavaServer
  import base64
except ImportError:
  os.system('pip install -r requirements.txt')

bot = TeleBot(token=token)
path = pathlib.Path(sys.argv[0]).parent.resolve()
users = []
admins = [7455363246]
buttons = types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∞—Ä–æ–ª–µ–π –∏ —Ç.–¥.', callback_data='gen_info-btns'), types.InlineKeyboardButton('–î–µ–∞–Ω–æ–Ω—á–∏–∫', callback_data='deanon_btns'), types.InlineKeyboardButton('–£—Ç–∏–ª–∏—Ç—ã', callback_data='utilits_btns'), types.InlineKeyboardButton('–ò–ò, —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å, –∫–∞—Ä—Ç–∏–Ω–∫–∏', callback_data='ai_btns'), types.InlineKeyboardButton('–§—É–Ω–∫—Ü–∏–∏ YouTube', callback_data='youtube_funcs_btns'), types.InlineKeyboardButton('–ò–≥—Ä—ã', callback_data='games'))
gen_info_btns = types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥', callback_data='generate_qr'), types.InlineKeyboardButton('–°–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å', callback_data='generate_password'), types.InlineKeyboardButton('–¢–æ–ø –ø–µ—Å–Ω–∏ —Å —á–∞—Ä—Ç–æ–≤', callback_data='download-audio-from-youtube'),  types.InlineKeyboardButton('–¶–µ–Ω–∞ –∫—Ä–∏–ø—Ç—ã', callback_data='crypto-price'), types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞ —É—Ç–µ—á–∫–∏', callback_data='password_check'), types.InlineKeyboardButton('–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∏—Ç—Ä–æ', callback_data='nitro-generator'), types.InlineKeyboardButton('–§–µ–π–∫–æ–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å', callback_data='fake_human'), types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu'))
deanon_btns = types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IP', callback_data='information_about_ip'), types.InlineKeyboardButton('–î–µ–∞–Ω–æ–Ω –ø–æ —Ñ–æ—Ç–æ', callback_data='deanon_by_photo'), types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu'))
utilits_btns = types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather-info'), types.InlineKeyboardButton('–ó–∞—Ç–µ–º–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', callback_data='black-photo-make'), types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä', callback_data='demotivator-create'), types.InlineKeyboardButton('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', callback_data='predloshka'), types.InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –ò–ú–¢', callback_data='imt_check'), types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ –Ω–∏–∫–∞', callback_data='write_to_user_without_nickname'), types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞', callback_data='send-mail-by-bot'), types.InlineKeyboardButton('–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ E-Mail', callback_data='make-email-rassylka'), types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã', callback_data='virus-check'), types.InlineKeyboardButton('–ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞', callback_data='parsing-site'), types.InlineKeyboardButton('–ü–∞—Ä—Å–∏–Ω–≥ Google —Ñ–æ—Ç–æ', callback_data='google-photo-parsing'), types.InlineKeyboardButton('C++ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä', callback_data='cpp_compiler'), types.InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É —Å VK', callback_data='vk_music_download'), types.InlineKeyboardButton('–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –≤ VK', callback_data='last_post_vk'), types.InlineKeyboardButton('–ü–∞—Ä—Å–µ—Ä Yandex (BETA)', callback_data='yandex_beta_parse'), types.InlineKeyboardButton('–ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è –ª–∏—Ü–∞ (APLHA)', callback_data='make-face-pixel-censor'), types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫ [NEW]', callback_data='create-sticker-pack-with-florestik'), types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å API-—Ç–æ–∫–µ–Ω', callback_data='get-api-token'), types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Minecraft-—Å–µ—Ä–≤–µ—Ä–µ', callback_data='info-about-minecraft-server'), types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu'))
ai_btns = types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–†–∞–∑–≥–æ–≤–æ—Ä —Å GigaChat', callback_data='ai-text'), types.InlineKeyboardButton('–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', callback_data='ai-image'), types.InlineKeyboardButton('–ò–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å', callback_data='text-to-speech'), types.InlineKeyboardButton('–ò–∑ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç', callback_data='speech-to-text'), types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu'))
youtube_btns = types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ YouTube –∫–∞–Ω–∞–ª–µ', callback_data='full_info_yt'), types.InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube', callback_data='download-video-from-yt'), types.InlineKeyboardButton('–ù–∞–π—Ç–∏ –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', callback_data='search_youtube_video'), types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu'))
games = types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–°—ã–≥—Ä–∞—Ç—å –≤ –∫–ª–∏–∫–µ—Ä', web_app=types.WebAppInfo('https://florestdev.github.io/clicker-html/')), types.InlineKeyboardButton("–ó–º–µ–π–∫–∞ [NEW]", web_app=types.WebAppInfo("https://florestdev.github.io/snake-html/")), types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu"))

def info_about_minecraft_server(message: types.Message):
    try:
        server = JavaServer(message.text)
        status = server.status()
        if not status.icon:
            bot.reply_to(message, f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:\n–û–ø–∏—Å–∞–Ω–∏–µ: {status.description}\n–û–Ω–ª–∞–π–Ω: {status.players.online} / {status.players.max}\nMOTD –≤ plain: {status.motd.to_plain()}\n–í–µ—Ä—Å–∏—è —è–¥—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞: {status.version.name}\n–ü–∏–Ω–≥ (latency): {status.latency} –º—Å.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        else:
            bot.send_photo(message.chat.id, base64.b64decode(status.icon[22:]), caption=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:\n–û–ø–∏—Å–∞–Ω–∏–µ: {status.description}\n–û–Ω–ª–∞–π–Ω: {status.players.online} / {status.players.max}\nMOTD –≤ plain: {status.motd.to_plain()}\n–í–µ—Ä—Å–∏—è —è–¥—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞: {status.version.name}\n–ü–∏–Ω–≥ (latency): {status.latency} –º—Å.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')), reply_to_message_id=message.id)
    except:
        bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ—Å—Ç, –∏ —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ Java —Å–µ—Ä–≤–µ—Ä.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def create_already_stickerpack(message: types.Message, title: str):
    if not message.document:
        bot.reply_to(message, f'–¢—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª —Ñ–∞–π–ª.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        if message.document.file_name[-4:] != '.zip':
            bot.reply_to(message, f'–ù—É–∂–µ–Ω .zip –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        else:
            _ = open(path / f'{message.from_user.id}_sticker.zip', 'wb')
            _.write(bot.download_file(bot.get_file(message.document.file_id).file_path))
            _.close()
            del _
            bot.reply_to(message, f'–°–∫–∞—á–∞–ª–∏ –∞—Ä—Ö–∏–≤..\n–†–∞–∑–∞—Ä—Ö–∏–≤–∞—Ü–∏—è..')
            zip = zipfile.ZipFile(path / f'{message.from_user.id}_sticker.zip', 'r')
            elements = []
            for index, data in enumerate(zip.namelist(), 1):
                elements.append(f'{index}. {data}')
            bot.reply_to(message, f'–≠–ª–µ–º–µ–Ω—Ç—ã –∞—Ä—Ö–∏–≤–∞:\n\n' + '\n'.join(elements))
            del elements
            zip.extractall(path / f'{message.from_user.id}_sticker')
            bot.reply_to(message, f'–†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!')
            r = random.random()
            img = path / 'cat.png'
            bot.create_new_sticker_set(message.from_user.id, f'{message.from_user.id}_stickers_{r}', title, png_sticker=types.InputSticker(types.InputFile(open(img, 'rb').read(), file_name='cat.png'), emoji_list=["üëç"]))
            bot.reply_to(message, f'–°–æ–∑–¥–∞–ª–∏ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫.\n–ó–∞–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..')
            for file in os.listdir(path / f'{message.from_user.id}_sticker'):
                if file[-4:] == '.png':
                    bot.add_sticker_to_set(message.from_user.id, f'{message.from_user.id}_stickers_{r}', png_sticker=types.InputSticker(types.InputFile(open(path / f'{message.from_user.id}_sticker/{file}', 'rb').read(), file_name='cat.png'), emoji_list=["üëç"]))
                else:
                    bot.add_sticker_to_set(message.from_user.id, f'{message.from_user.id}_stickers_{r}', webm_sticker=types.InputSticker(types.InputFile(open(path / f'{message.from_user.id}_sticker/{file}', 'rb').read(), file_name='cat.png'), emoji_list=["üëç"]))
            bot.reply_to(message, f'–£—Å–ø–µ—Ö!\n–í–∞—à —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫: t.me/addstickers/{message.from_user.id}_stickers_{r}', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
def get_title_stickerpack(message: types.Message):
    bot.reply_to(message, f'–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!\n–ó–∞–ª–µ–π—Ç–µ –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–∞.')
    bot.register_next_step_handler(message, create_already_stickerpack, message.text)

def censor_faces_image(image: bytes, return_resolution: tuple[int] = (1280, 720), block_size: int = 20):
        """–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ª–∏—Ü–∞ –Ω–∞ —Ñ–æ—Ç–æ –≤ –ø–∏–∫—Å–µ–ª–∏, –∫–æ—Ä–æ—á–µ, —Ü–µ–Ω–∑—É—Ä–∞.\nimage: —Ñ–æ—Ç–∫–∞ –≤ `bytes`. –ü—Ä–∏–º–µ—Ä: open('photo.jpg', 'rb').read()\nreturn_resolution: –≤—ã—Ö–æ–¥–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, `(1280, 720)`.\nblock_size: —Ä–µ–∑–∫–æ—Å—Ç—å –º–æ–∑–∞–∏–∫–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20.\n–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç bytes."""
        from tqdm import tqdm
        img_pil = Image.open(io.BytesIO(image)).resize(return_resolution, Image.Resampling.LANCZOS)
        img = cv2.imdecode(numpy.frombuffer(image, numpy.uint8), cv2.IMREAD_COLOR)
        img = cv2.resize(img, return_resolution)
        
        os.environ['HOME'] == '/data/.yoloface'
        _, boxes, confs = face_analysis().face_detection(frame_arr=img, model='tiny')
        
        faces = [(x, y, w, h) for i, (x, y, w, h) in enumerate(boxes) if confs[i] > 0.5]
        if not faces:
            print(f'–õ–∏—Ü–∞ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.')
            return image
        else:
            for x, y, w, h in tqdm(faces, desc='–¶–µ–Ω–∑—É—Ä–∏–º –ª–∏—Ü–∞..', ncols=70):
                region = (x, y, x + w, y + h)
                region_img = img_pil.crop(region)
                small_size = (max(int(w) // block_size, 1), h)
                small_region = region_img.resize(small_size, Image.Resampling.NEAREST)
                mosaic_region = small_region.resize((w, h), Image.Resampling.NEAREST)
                img_pil.paste(mosaic_region, region)
            output = io.BytesIO()
            img_pil.save(output, format='JPEG')
            print(f'–ì–æ—Ç–æ–≤–æ!')
            return output.getvalue()


def face_obrab_func(message: types.Message):
    if not message.document:
        bot.reply_to(message, f'{message.from_user.full_name}, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ñ–æ—Ä–º–∞—Ç–æ–º .JPG, –±–µ–∑ —Å–∂–∞—Ç–∏—è (—Ñ–∞–π–ª–æ–º).', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        if message.document.file_name[-4:] != '.jpg':
            bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ `.jpg.` —Ñ–∞–π–ª—ã.', parse_mode='Markdown')
        else:
            pic = bot.download_file(bot.get_file(message.document.file_id).file_path)
            i = cv2.imdecode(numpy.frombuffer(pic, numpy.uint8), cv2.IMREAD_COLOR)
            censor_pic = censor_faces_image(pic, (i.shape[:2][1], i.shape[:2][0]), 15)
            bot.send_photo(message.chat.id, censor_pic, f'–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å –±–ª—é—Ä–æ–º –ª–∏—Ü–∞.', reply_to_message_id=message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            del pic, i, censor_pic
            
class AsyncYandexParser:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å –Ø–Ω–¥–µ–∫—Å–∞.\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ HTTP(s) –ø—Ä–æ–∫—Å–∏ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª–µ–º. –¢–∞–∫–∂–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Google Chrome –Ω–∞ –º–∞—à–∏–Ω—É.\nis_headless: —Å–∫—Ä—ã–≤–∞—Ç—å –æ–∫–Ω–æ —Å –ø–∞—Ä—Å–µ—Ä–æ–º?"""

    def __init__(self, proxy_host: str = None, proxy_port: int = None, proxy_user: str = None, proxy_pass: str = None, is_headless:bool=False):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å –Ø–Ω–¥–µ–∫—Å–∞.\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ HTTP(s) –ø—Ä–æ–∫—Å–∏ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª–µ–º. –¢–∞–∫–∂–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Google Chrome –Ω–∞ –º–∞—à–∏–Ω—É.\nis_headless: —Å–∫—Ä—ã–≤–∞—Ç—å –æ–∫–Ω–æ —Å –ø–∞—Ä—Å–µ—Ä–æ–º?"""
        self.proxy_host = proxy_host
        self.proxy_port = proxy_port
        self.proxy_user = proxy_user
        self.proxy_pass = proxy_pass
        self.isheadless = is_headless
        print(f'–ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å—É—á–∫–∏!\n–ù–∞—á–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏—Ç—å —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ start_parsing.')

    async def download_image(self, session: aiohttp.ClientSession, img_url, directory):
        """–ö–∞—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –±–ª—è—Ç—å."""
        if not all([self.proxy_host, self.proxy_port, self.proxy_user, self.proxy_pass]):
            if img_url and "http" in img_url:
                try:
                    async with session.get(img_url) as response:
                        if response.status == 200:
                            _ = random.random()
                            file_path = os.path.join(directory, f'{_}.jpg')
                            with open(file_path, 'wb') as file:
                                file.write(await response.read())
                except Exception as e:
                    print(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Å–∫–∞—á–∞–ª–∞—Å—å, –ø–∏–∑–¥–µ—Ü: {e}")
        else:
            if img_url and "http" in img_url:
                try:
                    proxy_auth = aiohttp.BasicAuth(login=self.proxy_user, password=self.proxy_pass)
                    async with session.get(img_url, proxy=f'http://{self.proxy_host}:{self.proxy_port}', proxy_auth=proxy_auth) as response:
                        if response.status == 200:
                            _ = random.random()
                            file_path = os.path.join(directory, f'{_}.jpg')
                            with open(file_path, 'wb') as file:
                                file.write(await response.read())
                except Exception as e:
                    print(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Å–∫–∞—á–∞–ª–∞—Å—å, –ø–∏–∑–¥–µ—Ü: {e}")

    async def start_parsing(self, query: str, directory: str, max_images=10, scrolly=5, pages:int=6):
        """–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏—Ç—å..\nquery: –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä: –∫–æ—Ç–∏–∫–∏\ndirectory: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞ –º–∞—à–∏–Ω–µ, –≥–¥–µ –Ω–∞–¥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏.\nmax_images: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.\nscrolly: —Å–∫–æ–∫–∞ —Å–∫—Ä–æ–ª–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏?\npages: —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –ø–∞—Ä—Å–∏—Ç—å?"""
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(directory):
            os.makedirs(directory)
        os.chdir(directory)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        try:
            chrome_options = Options()
            chrome_options.add_argument("--log-level=1")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument('--disable-sync')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--headless=new')
            chrome_options.add_argument("--disable-features=NetworkServiceInProcess")
            chrome_options.add_argument("--disable-setuid-sandbox")
            chrome_options.add_argument('--no-sandbox')
            driver = webdriver.Chrome(options=chrome_options)
            print("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –∞—Ö—É–µ—Ç—å!")
        except Exception as e:
            print(f"–ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å Chrome, –ø–∏–∑–¥–µ—Ü: {e}")
            return

        image_urls = []
        try:
            for p in range(1, pages + 1):
                url = f"https://yandex.ru/images/search?text={query}&p={p}"
                driver.get(url)
                print(f"–ó–∞—à—ë–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ({p}), –∂–¥—ë–º, –±–ª—è—Ç—å")
                
                # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É –ø–∏–∫—á
                await asyncio.sleep(10)
                
                # –°–∫—Ä–æ–ª–ª–∏–º
                for _ in range(scrolly):
                    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                    await asyncio.sleep(2.5)
                    print("–°–∫—Ä–æ–ª–ª—é, —Å—É–∫–∞")
                
                all_images = driver.find_elements(By.TAG_NAME, "img")[:max_images]
                print(f"–í—Å–µ–≥–æ —Ç–µ–≥–æ–≤ <img> –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(all_images)}")
                if all_images:
                    for img in all_images:
                        img_url = img.get_attribute("src")
                        if img_url and "http" in img_url:
                            image_urls.append(img_url)
                else:
                    print(f"–ù–∏ –æ–¥–Ω–æ–≥–æ <img> –Ω–µ –Ω–∞—à—ë–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {p}, –ø–∏–∑–¥–µ—Ü –ø–æ–ª–Ω—ã–π")

        except Exception as e:
            print(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –ø–æ –ø–∏–∑–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {p}: {e}")

        driver.quit()
        print("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã–ª, –ø–∏–∑–¥–µ—Ü, –≥–æ—Ç–æ–≤–æ")

        # –ö–∞—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if image_urls:
            print(f"–ù–∞—á–∏–Ω–∞–µ–º –∫–∞—á–∞—Ç—å {len(image_urls)} –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –±–ª—è—Ç—å...")
            async with aiohttp.ClientSession(headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/129.0.0.0 Safari/537.36'}) as session:
                tasks = [self.download_image(session, url, directory) for url in image_urls[:max_images]]
                await tqdm.gather(*tasks, desc='–ö–∞—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏...', ncols=70)
        else:
            print("–ù–∏—Ö—É—è –Ω–µ —Å–∫–∞—á–∞–ª, –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–µ—Ç, –ø–∏–∑–¥–µ—Ü")

def is_youtube_banned(id: str):
    if id in open(path / f'banned_youtube.txt', 'r').readlines():
        return True
    else:
        return False
    
def parse_yandex(message: types.Message, query: str, colvo: int):
    bot.reply_to(message, f'–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏—Ç—å..')
    parser = AsyncYandexParser(is_headless=True)
    asyncio.run(parser.start_parsing(query, path / f'{message.from_user.id}_parseyandex', colvo, 6, int(message.text)))
    files = os.listdir(path / f'{message.from_user.id}_parseyandex')
    zip = zipfile.ZipFile(path / f'{message.from_user.id}_parseyandex.zip', 'w')
    for file in files:
        zip.write(os.path.join(path / f'{message.from_user.id}_parseyandex', file), compress_type=zipfile.ZIP_DEFLATED)
    zip.close()
    bot.send_chat_action(message.chat.id, 'upload_document')
    bot.send_document(message.chat.id, open(path / f'{message.from_user.id}_parseyandex.zip', 'rb'), message.id, caption=f'–í–∞—à–∏ —Å–ø–∞—Ä—à–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({colvo}) c Yandex.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    os.remove(path / f'{message.from_user.id}_parseyandex.zip')
    shutil.rmtree(path / f'{message.from_user.id}_parseyandex')
    del zip, parser, files

def get_colvo_p(message: types.Message, query: str):
    bot.reply_to(message, f'–•–æ—Ä–æ—à–æ! –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–∏—Å–∫–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å?\n–ù–∞–ø—Ä–∏–º–µ—Ä: 5')
    bot.register_next_step_handler(message, parse_yandex, query, int(message.text))

def get_query_p(message: types.Message):
    bot.reply_to(message, f'–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å?')
    bot.register_next_step_handler(message, get_colvo_p, message.text)

def check_ai_result(message: types.Message):
    if message.text in ['voice', 'text']:
        bot.reply_to(message, f'–ù–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å GigaChat!\n–õ–∏–±–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏, –ª–∏–±–æ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!')
        bot.register_next_step_handler(message, ai_obrabotchik, 2, message.text)
    else:
        bot.reply_to(message, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–∫–ª–∏–∫. –õ–∏–±–æ voice, –ª–∏–±–æ text!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def last_post_vk(message: types.Message):
    vk_session = vk_api.VkApi(token=token_for_vk)
    vk = vk_session.get_api()
    response = vk.groups.search(q=message.text, type='group', count=1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º groups.search
    response1 = vk.wall.get(owner_id=-int(response['items'][0]['id']), count=1)  # owner_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –≥—Ä—É–ø–ø
    if response['count'] > 0:
            post = response1['items'][0]
            text = post.get('text', '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            post_id = post['id']
            owner_id = post['owner_id']
            link = f"https://vk.com/wall{owner_id}_{post_id}"  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
            likes = response1['items'][0]['likes']['count']
            views = response1['items'][0]['views']['count']
            reposts = response1['items'][0]['reposts']['count']
            bot.reply_to(message, f'–ü–æ—Å—Ç –æ—Ç {message.text}:\n–¢–µ–∫—Å—Ç: {text}\n–°—Å—ã–ª–∫–∞: {link}\n–õ–∞–π–∫–∏: {likes}\n–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}\n–†–µ–ø–æ—Å—Ç—ã: {reposts}', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        bot.reply_to(message, f'–ü–∞–±–ª–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def all_ready_download(message: types.Message, songs: list[Song]):
    bot.reply_to(message, f'–ö–∞—á–∞–µ–º...', reply_markup=types.ReplyKeyboardMarkup(True, input_field_placeholder=f'–°—ç—Ä, –¥–∞, —Å—ç—Ä.', row_width=1).add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
    try:
        _ = int(message.text)
        try:
            song = songs[_]
            req = requests.get(song.url)
            bot.send_audio(message.chat.id, req.content, caption=f'{song.artist} - {song.title}\n–°—Å—ã–ª–∫–∞: {song.url}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time.strftime("%H:%M:%S", time.gmtime(song.duration))}', duration=song.duration, performer=song.artist, title=song.title, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        except:
            bot.reply_to(message, f'–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞.\n–ü–µ—Å–Ω–∏ –Ω–µ—Ç—É –≤ —Å–ø–∏—Å–∫–µ!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    except:
        bot.reply_to(message, f'–¢—Ä–µ–±—É–µ—Ç—Å—è —á–∏—Å–ª–æ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def vk_music_download(message: types.Message):
    if not message.text:
        bot.reply_to(message, f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        service = Service(vk_useragent, token_for_vk)
        songs = service.search_songs_by_text(message.text, count=10)
        if len(songs) == 0:
            bot.reply_to(message, f'–ü–µ—Å–Ω–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö VK –º—É–∑—ã–∫–∏!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        else:
            composisions = []
            m = types.ReplyKeyboardMarkup(row_width=1)
            for index, _ in enumerate(songs):
                composisions.append(f'{index}. {_.artist} - {_.title} ({time.strftime("%H:%M:%S", time.gmtime(_.duration))})')
                m.add(types.KeyboardButton(index))
            bot.reply_to(message, f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–∑–∏—é:\n\n' + '\n'.join(composisions), reply_markup=m)
            bot.register_next_step_handler(message, all_ready_download, songs)
            del m, composisions
            #song = random.choice(songs)
            #req = requests.get(song.url)
            #bot.send_audio(message.chat.id, req.content, caption=f'{song.artist} - {song.title}\n–°—Å—ã–ª–∫–∞: {song.url}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time.strftime("%H:%M:%S", time.gmtime(song.duration))}', duration=song.duration, performer=song.artist, title=song.title, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def cpp_compiler(message: types.Message):
    if not message.document:
        bot.reply_to(message, f'–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ .cpp/.cxx —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        if message.document.file_name[-4:] == '.cpp' or message.document.file_name == '.cxx':
            bot.reply_to(message, f'–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é.. –ø—Ä–∏—à–ª–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ .exe –¥–æ–∫—É–º–µ–Ω—Ç–∞.')
            try:
                chislo = random.randint(1, 10000)
                _ = open(path / f'{chislo}{message.document.file_name[-4:]}', 'wb')
                _.write(bot.download_file(bot.get_file(message.document.file_id).file_path))
                _.close()
                subprocess.run(['g++', f'{chislo}{message.document.file_name[-4:]}', '-o', f'{chislo}'], check=True)
                bot.send_document(message.chat.id, open(path / f'{chislo}.exe', 'rb'), caption='–í–∞—à .exe —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ C++ –∫–æ–¥–∞.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                os.remove(path / f'{chislo}{message.document.file_name[-4:]}')
                os.remove(path / f'{chislo}.exe')
            except Exception as e:
                os.remove(path / f'{chislo}{message.document.file_name[-4:]}')
                bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∫–æ–¥–∞.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        else:
            bot.reply_to(message, f'–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ .cpp/.cxx —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
def speech_to_text(message: types.Message):
    if message.voice:
        if message.voice.duration > 600:
            bot.reply_to(message, f'–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏—Ç—å—Å—è –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        else:
            msg = bot.reply_to(message, f'–ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...')
            chislo = random.randint(1, 10000)
            audio__ = open(path / f'audio_{chislo}.ogg', 'wb')
            audio__.write(bot.download_file(bot.get_file(message.voice.file_id).file_path))
            audio__.close()
            subprocess.run(['ffmpeg', '-i', f'audio_{chislo}.ogg', f'audio_{chislo}.wav'])
            try:
                r = sr.Recognizer()
                file = open(path / f'audio_{chislo}.wav', 'rb')
                with sr.AudioFile(file) as source:
                    audio = r.record(source)
                text = r.recognize_google(audio, language='ru-RU')
                bot.delete_message(msg.chat.id, msg.id)
                bot.reply_to(message, f'–í –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–∫–∞–∑–∞–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ: `{text}`.', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            except sr.UnknownValueError:
                bot.delete_message(msg.chat.id, msg.id)
                bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –¥–∞–Ω–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            except Exception as e:
                bot.delete_message(msg.chat.id, msg.id)
                bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–∫–∏–Ω—å—Ç–µ –Ω–∞–º –∫–æ–¥ –æ—à–∏–±–∫–∏.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: `{e}`', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            os.remove(path / f'audio_{chislo}.ogg')
            os.remove(path / f'audio_{chislo}.wav')
    elif message.video_note:
        msg = bot.reply_to(message, f'–ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...')
        chislo = random.randint(1, 10000)
        video__ = open(path / f'video_{chislo}.mp4', 'wb')
        video__.write(bot.download_file(bot.get_file(message.video_note.file_id).file_path))
        video__.close()
        subprocess.run(['ffmpeg', '-i', f'video_{chislo}.mp4', f'video_{chislo}.wav'])
        try:
            r = sr.Recognizer()
            file = open(path / f'video_{chislo}.wav', 'rb')
            with sr.AudioFile(file) as source:
                audio = r.record(source)
            text = r.recognize_google(audio, language='ru-RU')
            bot.delete_message(msg.chat.id, msg.id)
            bot.reply_to(message, f'–í –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–∫–∞–∑–∞–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ: `{text}`.', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        except sr.UnknownValueError:
            bot.delete_message(msg.chat.id, msg.id)
            bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –¥–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–∏.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        except Exception as e:
            bot.delete_message(msg.chat.id, msg.id)
            bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–∫–∏–Ω—å—Ç–µ –Ω–∞–º –∫–æ–¥ –æ—à–∏–±–∫–∏.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: `{e}`', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        os.remove(path / f'video_{chislo}.mp4')
        os.remove(path / f'video_{chislo}.wav')
    elif message.video:
        if message.video.duration > 600:
            bot.reply_to(message, f'–í–∏–¥–µ–æ –¥–ª–∏—Ç—å—Å—è –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –µ–≥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        else:
            msg = bot.reply_to(message, f'–ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...')
            chislo = random.randint(1, 10000)
            video__ = open(path / f'video_{chislo}.mp4', 'wb')
            video__.write(bot.download_file(bot.get_file(message.video.file_id).file_path))
            video__.close()
            subprocess.run(['ffmpeg', '-i', f'video_{chislo}.mp4',  f'video_{chislo}.wav'])
            try:
                r = sr.Recognizer()
                file = open(path / f'video_{chislo}.wav', 'rb')
                with sr.AudioFile(file) as source:
                    audio = r.record(source)
                text = r.recognize_google(audio, language='ru-RU')
                bot.delete_message(msg.chat.id, msg.id)
                bot.reply_to(message, f'–í –≤–∏–¥–µ–æ —Å–∫–∞–∑–∞–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ: `{text}`.', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            except sr.UnknownValueError:
                bot.delete_message(msg.chat.id, msg.id)
                bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –¥–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            except Exception as e:
                bot.delete_message(msg.chat.id, msg.id)
                bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–∫–∏–Ω—å—Ç–µ –Ω–∞–º –∫–æ–¥ –æ—à–∏–±–∫–∏.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: `{e}`', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            os.remove(path / f'video_{chislo}.mp4')
            os.remove(path / f'video_{chislo}.wav')
    else:
        bot.reply_to(message, f'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è, –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 10 –º–∏–Ω—É—Ç –∏ –º–µ–Ω—å—à–µ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
def google_photo_parsing(message: types.Message):
    if not message.text:
        bot.reply_to(message, f'–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å.',reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        req = requests.get(f'https://www.google.com/search?q={message.text}&tbm=isch&imglq=1&isz=l&safe=unactive', proxies=proxies)
        soup = BeautifulSoup(req.text, 'html.parser')
        tags = soup.find_all('img', {'src':True})
        imgs_links = []
        for tag in tags:
            if 'https://' in tag['src']:
                imgs_links.append(tag['src'])
        bot.send_photo(message.chat.id, requests.get(random.choice(imgs_links), proxies=proxies).content, caption='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n–ù–∞–π–¥–µ–Ω–æ –≤ Google Photo.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
def parsing_site_fl(message: types.Message):
    if not message.text:
        bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.', reply_markup=types.InlineKeyboardMarkup().add(types.InineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        try:
            random_chisle = random.randint(1, 100000)
            req = requests.get(message.text, headers=headers_for_html_requests, proxies=proxies)
            if req.status_code == 200:
                file = open(path / f'code_{random_chisle}.html', 'w')
                file.write(req.text)
                file.close()
                bot.send_document(message.chat.id, open(path / f'code_{random_chisle}.html'), message.id, caption='–§–∞–π–ª —Å –∫–æ–¥–æ–º –æ—Ç —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')), visible_file_name=False)
                os.remove(path / f'code_{random_chisle}.html')
            else:
                bot.reply_to(message, f'–û—à–∏–±–∫–∞: {req.status_code}.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        except Exception as e:
            bot.reply_to(message, f'–û—à–∏–±–∫–∞: {e}.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
def virus_check(message: types.Message):
    if not message.document:
        bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤. 20 –ú–ë –∏ –º–µ–Ω—å—à–µ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        file = bot.get_file(message.document.file_id)
        if file.file_size > 20971520:
            bot.reply_to(message, f'–í —Å–≤—è–∑–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ "VirusTotal" –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ñ–∞–π–ª—ã 20 –ú–ë –∏ –º–µ–Ω—å—à–µ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        else:
            EICAR = bot.download_file(file.file_path)
            EICAR_MD5 = hashlib.md5(EICAR).hexdigest()

            vt = VirusTotalPublicApi(virustotal_apikey)

            response = vt.get_file_report(EICAR_MD5)
            print(response)
            if response['results']['positives'] == 0:
                bot.reply_to(message, f'üü¢{response["results"]["positives"]} —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–∑–Ω–∞–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –æ–ø–∞—Å–Ω—ã–º\.\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\.]({response["results"]["permalink"]})', reply_markup=types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), parse_mode='MarkdownV2')
            elif response['results']['positivies'] < 20:
                bot.reply_to(message, f'üü°{response["results"]["positives"]} —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–∑–Ω–∞–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –æ–ø–∞—Å–Ω—ã–º\.\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\.]({response["results"]["permalink"]})', reply_markup=types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), parse_mode='MarkdownV2')
            else:
                bot.reply_to(message, f'üî¥{response["results"]["positives"]} —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–∑–Ω–∞–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –æ–ø–∞—Å–Ω—ã–º\.\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\.]({response["results"]["permalink"]})', reply_markup=types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), parse_mode='MarkdownV2')

def get_email_body(message: types.Message, title: str, recipients: list):
    bot.reply_to(message, f'–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É...')
    for email in recipients:
        try:
            message1 = MIMEMultipart()
            message1["From"] = username_mail
            message1["To"] = email
            message1["Subject"] = title
        
            message1.attach(MIMEText(f'{message.text}\n\n–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ–π –ø–æ—á—Ç—ã FlorestBot.\nhttps://taplink.cc/florestone4185 - —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞.\n@postbotflorestbot - –±–æ—Ç –≤ Telegram.', "plain", 'utf-8'))
        
            with smtplib.SMTP_SSL("smtp.mail.ru", 465) as server:
                server.login(username_mail, password=passwd_mail)
                server.sendmail(username_mail, email, message1.as_string())
                bot.send_message(message.chat.id, f'–£–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –Ω–∞ –ø–æ—á—Ç—É: {email}.')
        except Exception as e:
            bot.send_message(message.chat.id, f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –Ω–∞ –ø–æ—á—Ç—É: {email}.\n–ü—Ä–∏—á–∏–Ω–∞: {e}')
    bot.send_message(message.chat.id, f'–¶–∏–∫–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def get_email_subject_(message: types.Message, recipients: list):
    bot.reply_to(message, f'–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ –±—É–¥–µ—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º.')
    bot.register_next_step_handler(message, get_email_body, message.text, recipients)

def priem_emails_LOL(message: types.Message):
    if message.text:
        bot.reply_to(message, f'–û—Ç–ª–∏—á–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.')
        bot.register_next_step_handler(message, get_email_subject_, message.text.split())
    elif message.document:
        if message.document.file_name[-4:] != '.txt':
            bot.reply_to(message, f'–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ .txt —Ñ–∞–π–ª—ã.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        else:
            bot.reply_to(message, f'–û—Ç–ª–∏—á–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.')
            bot.register_next_step_handler(message, get_email_subject_, bot.download_file(bot.get_file(message.document.file_id).file_path).decode().split())
    else:
        bot.reply_to(message, f'–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ .txt —Ñ–∞–π–ª—ã.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def send_mail(chat_id: int, message_id: int, title: str, subject: str, recipient: str):
    message = MIMEMultipart()
    message["From"] = username_mail
    message["To"] = recipient
    message["Subject"] = title
 
    message.attach(MIMEText(f'{subject}\n\n–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ–π –ø–æ—á—Ç—ã FlorestBot.\nhttps://taplink.cc/florestone4185 - —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞.\n@postbotflorestbot - –±–æ—Ç –≤ Telegram.', "plain", 'utf-8'))
 
    with smtplib.SMTP_SSL("smtp.mail.ru", 465) as server:
        server.login(username_mail, password=passwd_mail)
        server.sendmail(username_mail, recipient, message.as_string())
        bot.edit_message_text('–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', chat_id, message_id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def get_email_recipient(message: types.Message, title: str, subject: str):
    if not message.text:
        bot.reply_to(message, f'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        msg = bot.reply_to(message, f'–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–∏—Å—å–º–æ...')
        send_mail(msg.chat.id, msg.id, title, subject, message.text)

def get_email_subject(message: types.Message, title: str):
    if not message.text:
        bot.reply_to(message, f'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        bot.reply_to(message, f'–û—Ç–ª–∏—á–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–∏—Å—å–º–∞ —Å—á–∞—Å—Ç—å—è.')
        bot.register_next_step_handler(message, get_email_recipient, title, message.text)

def get_email_title(message: types.Message) -> None:
    if not message.text:
        bot.reply_to(message, f'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        bot.reply_to(message, f'–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –ø–∏—Å—å–º–∞.')
        bot.register_next_step_handler(message, get_email_subject, message.text)

def write_to_user_without_nickname(message: types.Message) -> None:
    if len(message.text) > 10:
        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤—ã—à–∞—Ç—å 10 —Å–∏–º–≤–æ–ª–æ–≤.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    elif len(message.text) < 10:
        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ, —á–µ–º 10 —Å–∏–º–≤–æ–ª–æ–≤.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        try:
            bot.reply_to(message, f'–í–æ—Ç —Ç–µ–±–µ —Å—Å—ã–ª–æ—á–∫–∞ –Ω–∞ –Ω–µ–≥–æ\.\n[–ñ–º—è–∫–Ω—É—Ç—å\, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å\.](tg://openmessage?user_id={int(message.text)})', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')), parse_mode='MarkdownV2')
        except:
            bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¢–û–õ–¨–ö–û —á–∏—Å–ª–∞.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def sostoyaniye(bmi: float) -> str:
    if bmi < 18.5:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å"
    elif 18.5 <= bmi < 25:
        return "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å"
    elif 25 <= bmi < 30:
        return "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å"
    else:
        return "–û–∂–∏—Ä–µ–Ω–∏–µ"

def imt_height(message: types.Message, kg: float):
    if not message.text:
        bot.reply_to(message, f'–û–∂–∏–¥–∞–ª–æ—Å—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        try:
            a = float(message.text)
            if a == 0:
                bot.reply_to(message, f'–†–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω 0, –ª–∏–±–æ –º–µ–Ω—å—à–µ 0.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            else:
                if a < 0:
                    bot.reply_to(message, f'–†–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω 0, –ª–∏–±–æ –º–µ–Ω—å—à–µ 0.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                else:
                    imt = kg / (a ** 2)
                    sos = sostoyaniye(imt)
                    bot.send_message(message.chat.id, f'–í–∞—à –ò–ú–¢ —Ä–∞–≤–µ–Ω: {imt:.2f}.\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {sos.lower()}.', disable_web_page_preview=True, reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –≤–∑—è—Ç —É –¥—Ä—É–≥–∞', 'https://t.me/pie_rise_channel_s_8395/1009')))
        except Exception as e:
            print(e)
            bot.reply_to(message, f'–û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
def imt_check_kg(message: types.Message):
    if not message.text:
        bot.reply_to(message, f'–û–∂–∏–¥–∞–ª–æ—Å—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        try:
            a = float(message.text)
            if a == 0:
                bot.reply_to(message, f'–í–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω 0, –ª–∏–±–æ –º–µ–Ω—å—à–µ 0.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            else:
                if a < 0:
                    bot.reply_to(message, f'–í–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω 0, –ª–∏–±–æ –º–µ–Ω—å—à–µ 0.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                else:
                    bot.reply_to(message, f'–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ –º–µ—Ç—Ä–∞—Ö.')
                    bot.register_next_step_handler(message, imt_height, a)
        except:
            bot.reply_to(message, f'–û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def deanonchik_photo(message: types.Message) -> None:
    if not message.document:
        bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        if message.document.file_name[-4:] != '.jpg':
            bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        with Image.open(io.BytesIO(bot.download_file(bot.get_file(message.document.file_id).file_path))) as img:
            metadata = img._getexif()
            if not metadata:
                bot.reply_to(message, f'–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            gps_info = metadata.get(34853)
            if not gps_info:
                bot.reply_to(message, f'–°—Ä–µ–¥–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã GPS-–¥–∞–Ω–Ω—ã–µ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            else:
                lat = gps_info[2]
                lon = gps_info[4]
                lat_ref = gps_info[3]
                latitude = (lat[0] + lat[1] / 60.0 + lat[2] / 3600.0)
                longitude = (lon[0] + lon[1] / 60.0 + lon[2] / 3600.0)
                datetime_original = metadata.get(36867)
                try:
                    if lat_ref != 'E':
                        latitude = -latitude
                    r = requests.get(f"https://nominatim.openstreetmap.org/reverse?lat={latitude}&lon={longitude}&format=json", headers={"Accept-Language":"ru-RU", "User-Agent":"FlorestApplication"}, proxies=proxies)
                    json = r.json()
                    if datetime_original:
                        bot.send_location(message.chat.id, latitude, longitude)
                        bot.reply_to(message, f'–°—Ç—Ä–∞–Ω–∞: {json["address"]["country"]}\n–†–µ–≥–∏–æ–Ω: {json["address"]["state"]}\n–†–∞–π–æ–Ω: {json["address"]["district"]}\n–ì–æ—Ä–æ–¥: {json["address"]["city"]}\n–†–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: {json["display_name"]}\n–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {json["address"]["postcode"]}\n–í—Ä–µ–º—è —Å—ä–µ–º–∫–∏: {datetime_original}', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                    else:
                        bot.send_location(message.chat.id, latitude, longitude)
                        bot.reply_to(message, f'–°—Ç—Ä–∞–Ω–∞: {json["address"]["country"]}\n–†–µ–≥–∏–æ–Ω: {json["address"]["state"]}\n–†–∞–π–æ–Ω: {json["address"]["district"]}\n–ì–æ—Ä–æ–¥: {json["address"]["city"]}\n–†–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: {json["display_name"]}\n–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {json["address"]["postcode"]}\n–í—Ä–µ–º—è —Å—ä–µ–º–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                except:
                    if lat_ref != 'E':
                        latitude = -latitude
                    longitude = -longitude
                    r = requests.get(f"https://nominatim.openstreetmap.org/reverse?lat={latitude}&lon={longitude}&format=json", headers={"Accept-Language":"ru-RU", "User-Agent":"FlorestApplication"}, proxies=proxies)
                    json = r.json()
                    if datetime_original:
                        bot.send_location(message.chat.id, latitude, longitude)
                        bot.reply_to(message, f'–°—Ç—Ä–∞–Ω–∞: {json["address"]["country"]}\n–†–µ–≥–∏–æ–Ω: {json["address"]["state"]}\n–†–∞–π–æ–Ω: {json["address"]["district"]}\n–ì–æ—Ä–æ–¥: {json["address"]["city"]}\n–†–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: {json["display_name"]}\n–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {json["address"]["postcode"]}\n–í—Ä–µ–º—è —Å—ä–µ–º–∫–∏: {datetime_original}', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                    else:
                        bot.send_location(message.chat.id, latitude, longitude)
                        bot.reply_to(message, f'–°—Ç—Ä–∞–Ω–∞: {json["address"]["country"]}\n–†–µ–≥–∏–æ–Ω: {json["address"]["state"]}\n–†–∞–π–æ–Ω: {json["address"]["district"]}\n–ì–æ—Ä–æ–¥: {json["address"]["city"]}\n–†–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: {json["display_name"]}\n–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {json["address"]["postcode"]}\n–í—Ä–µ–º—è —Å—ä–µ–º–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def generate_human():
    faker = faker_.Faker('ru-RU')
    today = date.today()
    year_f = int(str(faker.date_of_birth(minimum_age=25, maximum_age=50)).split("-")[0])
    month_f = int(str(faker.date_of_birth(minimum_age=25, maximum_age=50)).split("-")[1])
    day_f = int(str(faker.date_of_birth(minimum_age=25, maximum_age=50)).split("-")[2])
    age_t = today.year - year_f - ((today.month, today.day) < (month_f, day_f))
    bith_date = f'{day_f}.{month_f}.{year_f}'
    return f'–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è —Ñ–µ–π–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ "faker" –≤ Python.\n–ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞ –≤ Github –¥–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n–§–ò–û: {faker.name()}\n–í–æ–∑—Ä–∞—Å—Ç: {age_t} ({bith_date})\n–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: {faker.company()}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {faker.job().lower()}\n–ê–¥—Ä–µ—Å: –†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è, {faker.address()}\n–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {faker.address()[-6:]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {faker.phone_number()}\n–Æ–∑–µ—Ä–∞–≥–µ–Ω—Ç: {faker.user_agent()}\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {faker.credit_card_number()}\n–°—Ä–æ–∫ —Ä–∞–±–æ—Ç—ã: {faker.credit_card_expire()}\n–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {faker.credit_card_provider()}\n–ò–ù–ù: {faker.businesses_inn()}\n–û–†–ì–ù: {faker.businesses_ogrn()}'

def generate_nitro(chat_id: int, message_id: int):
    count = 50
    a = 0
    results = []
    while a < count:
        characters = string.ascii_uppercase + string.digits  # –ë—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
        random_code = ''.join(random.choice(characters) for _ in range(15))  # 15 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        formatted_code = '-'.join(random_code[i:i+4] for i in range(0, 15, 4))  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–∏—Ä–µ
        req = requests.get(f'https://discordapp.com/api/v9/entitlements/gift-codes/{formatted_code}?with_application=false&with_subscription_plan=true', headers={"User-Agent":random.choice(["Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.60 YaBrowser/20.12.0.963 Yowser/2.5 Safari/537.36", "SeopultContentAnalyzer/1.0", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.41 YaBrowser/21.2.0.1097 Yowser/2.5 Safari/537.36", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18362"]), "Accept-Language":"ru-RU"}, proxies=proxies)
        results.append(f'{formatted_code} - {req.json()["message"]}')
        a+=1
    bot.edit_message_text('\n'.join(results), chat_id, message_id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def free_proxies(chat_id: int, message_id: int):
    response = requests.get("https://free-proxy-list.net/", headers=headers_for_html_requests, proxies=proxies)
    soup = BeautifulSoup(response.content, 'html.parser')
    proxies_from_site = soup.textarea.text.split('\n')[3:-1]
    bot.edit_message_text(f'–ù–∞–π–¥–µ–Ω–æ {str(len(proxies_from_site))} –ø—Ä–æ–∫—Å–∏. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É.\n–ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ 100 –ø—Ä–æ–∫—Å–∏ –≤ —Ü–µ–ª—è—Ö —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: 5 –º–∏–Ω—É—Ç 50 —Å–µ–∫—É–Ω–¥.', chat_id, message_id)
    normisy = []
    for proxy in proxies_from_site[:100]:
        try:
            req = requests.get(f'http://ip-api.com/json/google.ru?lang=ru', headers=headers_for_html_requests, proxies={"http":f"http://{proxy}", "https":f'http://{proxy}'}, timeout=3.5)
            if req.status_code == 200:
                normisy.append(proxy)
            else:
                pass
        except:
            pass
    if len(normisy) > 0:
        bot.edit_message_text(f'–í–æ—Ç —Ç–≤–æ–∏ –ø—Ä–æ–∫—Å–∏))).\n–û–Ω–∏ –ø—É–±–ª–∏—á–Ω—ã–µ, –±–µ–∑ –ø–∞—Ä–æ–ª—è –∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ—Ç–æ–∫–æ–ª - HTTP(s). –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n' + '\n'.join(normisy), chat_id, message_id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        bot.edit_message_text(f'–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', chat_id, message_id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
def password_check(message: types.Message):
    req = requests.get(f'https://api.proxynova.com/comb?query={message.text}&start=0&limit=15', headers=headers_for_html_requests, proxies=proxies)
    if req.status_code == 200:
        if req.json()['count'] == 0:
            bot.reply_to(message, f'–£—Ç–µ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∏–∫–∞.\n–ù–æ –≤—Å–µ —Ä–∞–≤–Ω–æ, —Å—Ç–∞–≤—å 2FA –∏ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –º–µ–Ω—è–π –ø–∞—Ä–æ–ª—å.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        else:
            bot.reply_to(message, f'–ù–∞–π–¥–µ–Ω—ã —É—Ç–µ—á–∫–∏!\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–µ—á–µ–∫: {str(req.json()["count"])}.\n–ü–æ–º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª–∏ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ 2FA.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def crypto_info(message: types.Message):
        if message.text == 'USDT':
            result_usdt_rub = requests.get('https://api.coingecko.com/api/v3/simple/price', params={"ids":'tether', 'vs_currencies':'rub'}, proxies=proxies, headers=headers_for_html_requests).json()['tether']['rub']
            bot.reply_to(message, f'–¶–µ–Ω–∞ USDT –≤ —Ä—É–±–ª—è—Ö.\n–†—É–±–ª–∏: {str(result_usdt_rub)}', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
        elif message.text == 'LTC':
            result_ltc_rub = requests.get('https://api.coingecko.com/api/v3/simple/price', params={"ids":'litecoin', 'currencies':'rub'}, proxies=proxies, headers=headers_for_html_requests).json()['litecoin']['rub']
            bot.reply_to(message, f'–¶–µ–Ω–∞ LTC –≤ —Ä—É–±–ª—è—Ö.\n–†—É–±–ª–∏: {str(result_ltc_rub)}', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
        elif message.text == 'DOGE':
            result_doge_rub = requests.get('https://api.coingecko.com/api/v3/simple/price', params={"ids":'dogecoin', 'vs_currencies':'rub'}, proxies=proxies, headers=headers_for_html_requests).json()['dogecoin']['rub']
            bot.reply_to(message, f'–¶–µ–Ω–∞ DOGE –≤ —Ä—É–±–ª—è—Ö.\n–†—É–±–ª–∏: {str(result_doge_rub)}', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
        elif message.text == 'HMSTR':
            result_hamster_rub = requests.get('https://api.coingecko.com/api/v3/simple/price', params={"ids":'hamster', 'vs_currencies':'rub'}, proxies=proxies, headers=headers_for_html_requests).json()['hamster']['rub']
            bot.reply_to(message, f'–¶–µ–Ω–∞ HMSTR –≤ —Ä—É–±–ª—è—Ö.\n–†—É–±–ª–∏: {str(result_hamster_rub)}', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
        elif message.text == 'BTC':
            result_btc_rub = requests.get('https://api.coingecko.com/api/v3/simple/price', params={"ids":'bitcoin', 'vs_currencies':'rub'}, proxies=proxies, headers=headers_for_html_requests).json()['bitcoin']['rub']
            bot.reply_to(message, f'–¶–µ–Ω–∞ BTC –≤ —Ä—É–±–ª—è—Ö.\n–†—É–±–ª–∏: {str(result_btc_rub)}', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
        else:
            bot.reply_to(message, f'–î–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))

def deanon(ip: str):
    r = requests.get(f'http://ip-api.com/json/{ip}?lang=ru', proxies=proxies, headers=headers_for_html_requests).json()
    if r['status'] == 'fail':
        return 'Error.'
    else:
        results = []
        for key, value in r.items():
            results.append(value)
        return results

def deanon_by_ip_tg(message: types.Message):
    if not message.text:
        bot.reply_to(message, f'–ú—ã –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        if deanon(message.text) == 'Error.':
            bot.reply_to(message, f'–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —É –Ω–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É IP.\n–í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        else:
            results = deanon(message.text)
            bot.send_location(message.chat.id, results[7], results[8])
            bot.reply_to(message, f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IP –∞–¥—Ä–µ—Å—É.\n–í–ù–ò–ú–ê–ù–ò–ï! –î–ê–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –í–ó–Ø–¢–ê –° –û–¢–ö–†–´–¢–´–• –ò–°–¢–û–ß–ò–ö–û–í –ò –Ø–í–õ–Ø–ï–¢–°–Ø –ù–ê 100% –õ–ï–ì–ê–õ–¨–ù–û–ô –ò –ù–ï –ù–ê–†–£–®–ê–ï–¢ –ü–†–ê–í–ò–õ–ê TELEGRAM.\n\n–°—Ç—Ä–∞–Ω–∞: {results[1]}\n–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã: {results[2]}\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞: {results[4]}\n–ì–æ—Ä–æ–¥: {results[5]}\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {results[10]}\n–ö–æ–º–ø–∞–Ω–∏—è: {results[11]}', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ü–æ–¥—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –Ø.–ö–∞—Ä—Ç—ã', f'https://yandex.ru/maps/?text={results[7]},{results[8]}'), types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))


def search_by_query(message: types.Message):
    search = Search(message.text, proxies=proxies)
    search_process = bot.reply_to(message, f'–ò—â–µ–º...')
    if len(search.videos) == 0:
        bot.delete_message(search_process.chat.id, search_process.id)
        bot.reply_to(message, f'–ù–∏—á–µ–≥–æ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ YouTube.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        video = search.videos[0]
        if video.age_restricted:
            bot.delete_message(search_process.chat.id, search_process.id)
            bot.reply_to(message, f'–í–∏–¥–µ–æ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π, –∏–ª–∏ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        else:
            if video.length > 3600:
                bot.delete_message(search_process.chat.id, search_process.id)
                bot.reply_to(message, f'–í–∏–¥–µ–æ –∏–º–µ–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤—ã—à–µ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, –í—ã —Å–¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å, —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±–Ω–æ–µ –≤–∏–¥–µ–æ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            else:
                try:
                    buffer = io.BytesIO()
                    video.streams.get_lowest_resolution().stream_to_buffer(buffer)
                    bot.send_chat_action(message.chat.id, 'upload_video')
                    likes = requests.get('https://www.googleapis.com/youtube/v3/videos', params={"part":"statistics", "id":video.video_id, "key":google_api_key}, proxies=proxies, headers=headers_for_html_requests).json()
                    date = video.publish_date.strftime("%Y-%m-%d %H:%M:%S")
                    try:
                        bot.send_video(message.chat.id, buffer.getvalue(), caption=f'{video.author} - {video.title}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {video.views}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—Ç–æ–∫ "–Ω—Ä–∞–≤–∏—Ç—Å—è": {likes["items"][0]["statistics"]["likeCount"]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {likes["items"][0]["statistics"]["commentCount"]}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {date}', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')), supports_streaming=True)
                    except:
                        bot.send_video(message.chat.id, buffer.getvalue(), caption=f'{video.author} - {video.title}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {video.views}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {date}', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')), supports_streaming=True)
                    bot.delete_message(search_process.chat.id, search_process.id)
                except:
                    bot.delete_message(message.chat.id, message.id)
                    try:
                        bot.send_animation(message.chat.id, error_gif, caption='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n(–í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–µ—Ç–µ–π. –ü—Ä–∏—á–∏–Ω–∞ –µ—â–µ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–∞.)', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))
                    except:
                        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n(–í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–µ—Ç–µ–π. –ü—Ä–∏—á–∏–Ω–∞ –µ—â–µ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–∞.)', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))

def post_create(message: types.Message):
    if message.content_type not in ['document', 'video', 'video_note', 'audio', 'text', 'voice']:
        bot.reply_to(message, f'{message.from_user.first_name}, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∫—Ä—É–∂–∫–∏, –º—É–∑—ã–∫—É, —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        if message.text:
            bot.reply_to(message, f'{message.from_user.first_name}, –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ï—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @florestchannel.')
            bot.send_message(7455363246, f'{message.text}\n\nü§µ {message.from_user.first_name}')
        if message.video:
            bot.reply_to(message, f'{message.from_user.first_name}, –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ï—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @florestchannel.')
            bot.send_video(7455363246, bot.download_file(bot.get_file(message.video.file_id).file_path), caption=f'ü§µ {message.from_user.first_name}')
        if message.video_note:
            bot.reply_to(message, f'{message.from_user.first_name}, –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ï—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @florestchannel.')
            bot.send_message(7455363246, f'ü§µ {message.from_user.first_name}')
            bot.send_video_note(7455363246, bot.download_file(bot.get_file(message.video_note.file_id).file_path))
        if message.audio:
            bot.reply_to(message, f'{message.from_user.first_name}, –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ï—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @florestchannel.')
            bot.send_audio(7455363246, bot.download_file(bot.get_file(message.audio.file_id).file_path), f'ü§µ {message.from_user.first_name}', message.audio.duration, message.audio.performer, message.audio.title)
        if message.voice:
            bot.reply_to(message, f'{message.from_user.first_name}, –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ï—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @florestchannel.')
            bot.send_voice(7455363246, bot.download_file(bot.get_file(message.voice.file_id).file_path), f'ü§µ {message.from_user.first_name}', message.audio.duration)
        if message.document:
            if message.document.file_name[-4:] not in ['.jpg', '.png']:
                bot.reply_to(message, f'{message.from_user.first_name}, –º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∞ `.jpg` –∏ `.png`.', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            else:
                bot.reply_to(message, f'{message.from_user.first_name}, –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ï—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @florestchannel.')
                bot.send_photo(7455363246, bot.download_file(bot.get_file(message.document.file_id).file_path), f'ü§µ {message.from_user.first_name}')

def create_demotivator_with_pillow(image: io.BytesIO, text: str):
    img = Image.new('RGB', (1280, 1024), color='black')
    img_border = Image.new('RGB', (1060, 720), color='#000000')
    border = ImageOps.expand(img_border, border=2, fill='#ffffff')
    user_img = Image.open(image).convert("RGBA").resize((1050, 710))
    (width, height) = user_img.size
    img.paste(border, (111, 96))
    img.paste(user_img, (118, 103))
    drawer = ImageDraw.Draw(img)
    font_1 = ImageFont.truetype(font='times.ttf', size=80, encoding='UTF-8')
    text_width = font_1.getlength(water_sign)

    while text_width >= (width + 250) - 20:
        font_1 = ImageFont.truetype(font='times.ttf', size=80, encoding='UTF-8')
        text_width = font_1.getlength(water_sign)
        top_size -= 1

    font_2 = ImageFont.truetype(font='times.ttf', size=60, encoding='UTF-8')
    text_width = font_2.getlength(text)

    while text_width >= (width + 250) - 20:
        font_2 = ImageFont.truetype(font='times.ttf', size=60, encoding='UTF-8')
        text_width = font_2.getlength(text)
        bottom_size -= 1

    size_1 = drawer.textlength(water_sign, font=font_1)
    size_2 = drawer.textlength(text, font=font_2)

    drawer.text(((1280 - size_1) / 2, 840), water_sign, fill='white', font=font_1)
    drawer.text(((1280 - size_2) / 2, 930), text, fill='white', font=font_2)

    result_here = io.BytesIO()

    img.save(result_here, 'JPEG')
    
    del drawer

    return result_here.getvalue()


def make_demotivator(message: types.Message, file: bytes):
    if not message.text:
        bot.reply_to(message, f'{message.from_user.first_name}, –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–µ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        bot.send_photo(message.chat.id, create_demotivator_with_pillow(io.BytesIO(file), message.text), caption=f'–í–∞—à –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def image_priem_to_demotivator(message: types.Message):
    if not message.document:
        bot.reply_to(message, f'{message.from_user.first_name}, –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Å–∂–∞—Ç–∏—è.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        if message.document.file_name[-4:] not in ['.jpg', '.png']:
            bot.reply_to(message, f'{message.from_user.first_name}, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª—ã —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º `.png` –∏ `.jpg`.', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        try:
            bot.send_animation(message.chat.id, give_me_gif, caption='–°–ø—Å. –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤ –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–µ.')
        except telebot.apihelper.ApiTelegramException:
            bot.send_message(message.chat.id, '–°–ø—Å. –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤ –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–µ.')
        bot.register_next_step_handler(message, make_demotivator, bot.download_file(bot.get_file(message.document.file_id).file_path))

def download_video_func___(message: types.Message, url: str):
    if message.text == '–í–∏–¥–µ–æ':
        msg = bot.reply_to(message, f'–ö–∞—á–∞–µ–º –≤–∏–¥–µ–æ...', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
        try:
            yt_obj = YouTube(url, proxies=proxies)
            if not is_youtube_banned(yt_obj.video_id):
                    if not is_youtube_banned(yt_obj.channel_id):
                        if yt_obj.age_restricted:
                            bot.delete_message(message.chat.id, msg.id)
                            bot.reply_to(message, f'–ù–µ–ª—å–∑—è —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
                        else:
                            if yt_obj.length > 3600:
                                bot.delete_message(message.chat.id, msg.id)
                                bot.reply_to(message, '–ù–µ–ª—å–∑—è —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞.', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
                            else:
                                buffer = io.BytesIO()
                                yt_obj.streams.get_lowest_resolution().stream_to_buffer(buffer)
                                bot.delete_message(message.chat.id, msg.id)
                                bot.send_chat_action(message.chat.id, f'upload_video')
                                likes = requests.get('https://www.googleapis.com/youtube/v3/videos', params={"part":"statistics", "id":yt_obj.video_id, "key":google_api_key}, proxies=proxies, headers=headers_for_html_requests).json()
                                date = yt_obj.publish_date.strftime("%Y-%m-%d %H:%M:%S")
                                try:
                                    bot.send_video(message.chat.id, buffer.getvalue(), yt_obj.length, caption=f'{yt_obj.author} - {yt_obj.title}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {yt_obj.views}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—Ç–æ–∫ "–Ω—Ä–∞–≤–∏—Ç—Å—è": {likes["items"][0]["statistics"]["likeCount"]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {likes["items"][0]["statistics"]["commentCount"]}\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {date}', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')), supports_streaming=True)
                                except:
                                    bot.send_video(message.chat.id, buffer.getvalue(), yt_obj.length, caption=f'{yt_obj.author} - {yt_obj.title}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {yt_obj.views}\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {date}', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')), supports_streaming=True)
                                del buffer
                    else:
                        bot.reply_to(message, f'–ö–∞–Ω–∞–ª –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
            else:
                    bot.reply_to(message, f'–í–∏–¥–µ–æ –±—ã–ª–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
        except Exception as e:
                print(e)
                bot.delete_message(message.chat.id, msg.id)
                try:
                    bot.send_animation(message.chat.id, error_gif, caption=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–í–æ–∑–º–æ–∂–Ω–æ, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–∏–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ.\n–ò–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))
                except telebot.apihelper.ApiTelegramException:
                    bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–í–æ–∑–º–æ–∂–Ω–æ, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–∏–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ.\n–ò–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))
    elif message.text == '–ê—É–¥–∏–æ':
        msg = bot.reply_to(message, f'–ö–∞—á–∞–µ–º –∞—É–¥–∏–æ...', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
        try:
            yt_obj = YouTube(url, proxies=proxies)
            if not is_youtube_banned(yt_obj.video_id):
                if not is_youtube_banned(yt_obj.channel_id):
                    if yt_obj.age_restricted:
                        bot.delete_message(message.chat.id, msg.id)
                        bot.reply_to(message, f'–ù–µ–ª—å–∑—è —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ —Å –≤–∏–¥–µ–æ —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
                    else:
                        if yt_obj.length > 3600:
                            bot.delete_message(message.chat.id, msg.id)
                            bot.reply_to(message, '–ù–µ–ª—å–∑—è —Å–∫–∞—á–∏–≤–∞—Ç—å –∞—É–¥–∏–æ —Å –≤–∏–¥–µ–æ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞.', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
                        else:
                            buffer = io.BytesIO()
                            yt_obj.streams.get_audio_only().stream_to_buffer(buffer)
                            bot.delete_message(message.chat.id, msg.id)
                            bot.send_chat_action(message.chat.id, f'upload_voice')
                            date = yt_obj.publish_date.strftime("%Y-%m-%d %H:%M:%S")
                            likes = requests.get('https://www.googleapis.com/youtube/v3/videos', params={"part":"statistics", "id":yt_obj.video_id, "key":google_api_key}, proxies=proxies, headers=headers_for_html_requests).json()
                            try:
                                bot.send_audio(message.chat.id, buffer.getvalue(), duration=yt_obj.length, caption=f'{yt_obj.author} - {yt_obj.title}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {yt_obj.views}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—Ç–æ–∫ "–Ω—Ä–∞–≤–∏—Ç—Å—è": {likes["items"][0]["statistics"]["likeCount"]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {likes["items"][0]["statistics"]["commentCount"]}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {date}', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')), performer=yt_obj.author, title=yt_obj.title)
                            except:
                                bot.send_audio(message.chat.id, buffer.getvalue(), duration=yt_obj.length, caption=f'{yt_obj.author} - {yt_obj.title}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {yt_obj.views}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {date}', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')), performer=yt_obj.author, title=yt_obj.title)
                            del buffer
                else:
                    bot.reply_to(message, f'–ö–∞–Ω–∞–ª –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
            else:
                bot.reply_to(message, f'–í–∏–¥–µ–æ –±—ã–ª–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.', reply_markup=types.ReplyKeyboardMarkup().add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
        except Exception as e:
            print(e)
            bot.delete_message(message.chat.id, msg.id)
            try:
                bot.send_animation(message.chat.id, error_gif, caption=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–í–æ–∑–º–æ–∂–Ω–æ, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–∏–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ.\n–ò–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))
            except telebot.apihelper.ApiTelegramException:
                bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–í–æ–∑–º–æ–∂–Ω–æ, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–∏–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ.\n–ò–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))

def download_youtube_video_func(message: types.Message):
    bot.reply_to(message, f'–û—Ç–ª–∏—á–Ω–æ!\n–í–∏–¥–µ–æ, –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ?', reply_markup=types.ReplyKeyboardMarkup(row_width=1).add(types.KeyboardButton('–í–∏–¥–µ–æ'), types.KeyboardButton('–ê—É–¥–∏–æ')))
    bot.register_next_step_handler(message, download_video_func___, message.text)

def dialog_in_bot(message: types.Message) -> None:
    if message.text:
        bot.reply_to(message, f'–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='leave_chat')))
        msg=bot.send_message(7455363246, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({message.from_user.first_name}): {message.text}\n{message.from_user.id}')
        bot.register_next_step_handler(message, dialog_in_bot)
    else:
        bot.reply_to(message, f'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='leave_chat')))
        bot.register_next_step_handler(message, dialog_in_bot)

def get_channel_details(message: types.Message):
    msg=bot.reply_to(message, f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    try:
        if '/channel/' in message.text:
            channel_id = message.text.split('/channel/')[-1].split('?')[0]
            params = {
                "part": "snippet,statistics",
                "id": channel_id,
                "key": google_api_key
            }
        else:
            username = message.text.split('/@')[-1].split('?')[0]
            print(username)
            params = {
                "part": "snippet,statistics",
                "forHandle": f"@{username}",
                "key": google_api_key
            }
        request = requests.get(
            "https://www.googleapis.com/youtube/v3/channels",
            params=params,
            proxies=proxies
        )
        response = request.json()
        print(response)
        response_photo = requests.get(f'{response["items"][0]["snippet"]["thumbnails"]["high"]["url"]}', headers=headers_for_html_requests, proxies=proxies)
        bot.send_photo(message.chat.id, response_photo.content, caption=f'‚ö†Ô∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ –∫–∞–Ω–∞–ª–µ "`{response["items"][0]["snippet"]["title"]}`":\n\n**–ò–ù–§–û–†–ú–ê–¶–ò–Ø**\nüåê –ü—Å–µ–≤–¥–æ–Ω–∏–º: `{response["items"][0]["snippet"]["customUrl"]}`\n‚õ≥ –°—Ç—Ä–∞–Ω–∞: `{response["items"][0]["snippet"]["country"]}`\n\n**–°–¢–ê–¢–ò–°–¢–ò–ö–ê**\nüëÅÔ∏è –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: `{response["items"][0]["statistics"]["viewCount"]}`\n‚ô•Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: `{response["items"][0]["statistics"]["subscriberCount"]}`\nüé• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ: `{response["items"][0]["statistics"]["videoCount"]}`', parse_mode='MarkdownV2', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        bot.delete_message(message.chat.id, msg.id)
    except Exception as e:
        print(e)
        bot.delete_message(message.chat.id, msg.id)
        try:
            bot.send_animation(message.chat.id, error_gif, caption=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))
        except telebot.apihelper.ApiTelegramException:
            bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))

def delete_messages_bro(message: types.Message):
    try:
        messages_to_delete = []
        for m in range(message.message_id - int(message.text), message.message_id):
            messages_to_delete.append(m)
        bot.delete_messages(message.chat.id, messages_to_delete)
        messages_to_delete.clear()
    except:
        bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ç–∞–∫–∂–µ –∑–∞–º–µ—Ç—å—Ç–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –±–æ–ª–µ–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ –∏–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –¥–Ω–µ–π.')


def check_text(text: str):
    for i in banned_words:
        if i in text.lower():
            return True
        else:
            pass
    return False

def check_user(user: int):
    if str(user) in open(path / 'banned_users.txt').readlines():
        return True
    else:
        return False

def check_sub(user_id: int):
    member = bot.get_chat_member(telegram_channel_id, user_id).status
    if member in ['kicked', 'left']:
        return False
    else:
        return True

def send_reaction(chat_id: int, message_id: int, emoji: str):
    requests.post(f'https://api.telegram.org/bot{token}/setMessageReaction', json={"chat_id":chat_id, 'message_id':message_id, 'reaction':[{'type':'emoji', 'emoji':emoji}], 'is_big':False})

def download_music():
    headers = {
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7,fi;q=0.6,nb;q=0.5,is;q=0.4,pt;q=0.3,ro;q=0.2,it;q=0.1,de;q=0.1',
        'Connection': 'keep-alive',
        'Referer': 'https://music.yandex.ru/chart',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
        'X-Current-UID': '403036463',
        'X-Requested-With': 'XMLHttpRequest',
        'X-Retpath-Y': 'https://music.yandex.ru/chart',
        'sec-ch-ua': '"Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Linux"',
    }

    params = {
        'what': 'chart',
        'lang': 'ru',
        'external-domain': 'music.yandex.ru',
        'overembed': 'false',
        'ncrnd': '0.23800355071570123',
    }
    result = []
    response = requests.get('https://music.yandex.ru/handlers/main.jsx', params=params, headers=headers)
    chart = response.json()['chartPositions']
    for track in chart[:10]:
        position = track['track']['chart']['position']
        title = track['track']['title']
        author = track['track']['artists'][0]['name']
        result.append(f"‚Ññ{position}: {author} - {title}")
    return f'–ß–∞—Ä—Ç—ã –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Çüî•\nü•á{result[0]}\nü•à{result[1]}\nü•â{result[2]}\n{result[3]}\n{result[4]}\n{result[5]}\n{result[6]}\n{result[7]}\n{result[8]}\n{result[9]}'

def mute_human(message: types.Message, id: int):
    human = bot.get_chat_member(message.chat.id, id).user
    if message.text.lower() == 'infinity':
        bot.restrict_chat_member(message.chat.id, id, None, False, False, False, False, False, False, False, False)
        bot.reply_to(message, f'–£—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.')
    else:
        try:
            if int(message.text) >= 30:
                bot.restrict_chat_member(message.chat.id, id, time.time()+int(message.text), None, False, False, False, False, False, False, False)
                bot.reply_to(message, f'–£—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {message.text} —Å–µ–∫—É–Ω–¥.')
            else:
                bot.reply_to(message, f'–ù–µ–ª—å–∑—è –∑–∞–º—å—é—Ç–∏—Ç—å –º–µ–Ω—å—à–µ —á–µ–º 30 —Å–µ–∫—É–Ω–¥ –∏ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 366 –¥–Ω–µ–π.')
        except Exception as e:
            bot.reply_to(message, f'–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, –∞ —Ç–∞–∫–∂–µ —Å–ª–æ–≤–æ "infinity", –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.')
            print(e)

@bot.message_handler(commands=['start'])
def welcome(message: types.Message):
    if message.chat.type == 'private':
            if len(message.text.split()) == 1:
                if check_sub(message.from_user.id):
                    markup1 = types.InlineKeyboardMarkup(row_width=1)
                    button1 = types.InlineKeyboardButton(f'–ò–Ω—Ñ–∞ –æ –±–æ—Ç–µ', url='https://telegra.ph/INFORMACIYA-O-BOTE-06-27')
                    button21 = types.InlineKeyboardButton('Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel')
                    button31 = types.InlineKeyboardButton('–î—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã –§–ª–æ—Ä–µ—Å—Ç–∞', url='https://taplink.cc/florestone4185')
                    markup1.add(button1, button21, button31, types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º —Å –¥—Ä—É–≥–æ–º', f'https://t.me/share/url?url=https://t.me/postbotflorestbot?start={message.from_user.id}&&text=–ü—Ä–∏–≤–µ—Ç, —Å–æ–≤–µ—Ç—É—é —Ç–µ–±–µ —ç—Ç—É –∏–º–±—É–ª—å–∫—É! –¢–∞–º –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–Ω–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ!'))
                    try:
                        bot.send_photo(message.chat.id, open(path / 'obloshka_bota.jpg', 'rb'), caption=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\.\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\.\n\n–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 1 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ\-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π\.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR, –ø–∞—Ä–æ–ª–µ–π, –ø–æ–≥–æ–¥–∞, –ò–ò \(ChatGPT, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫\) –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n\n–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: /donate\n–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é: /support\n\n–ú–æ–π Telegram –∫–∞–Ω–∞–ª: [—Ç—ã–∫](https://t.me/florestchannel)\n–í—Å–µ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: [—Ç—ã–∫](https://taplink.cc/florestone4185)\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: [—Ç—ã–∫](https://github.com/florestdev/florestbot)\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [—Ç—ã–∫](https://t.me/postbotflorestbot?start={message.from_user.id})\n–ù–∞—à API: [—Ç—ã–∫](https://florestapi-florestdev4185.amvera.io)', reply_markup=markup1, parse_mode='MarkdownV2')
                    except:
                        bot.send_photo(message.chat.id, open(path / 'obloshka_bota.jpg', 'rb'), caption=f'–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\.\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\.\n\n–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 1 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ\-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π\.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR, –ø–∞—Ä–æ–ª–µ–π, –ø–æ–≥–æ–¥–∞, –ò–ò \(ChatGPT, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫\) –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n\n–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: /donate\n–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é: /support\n\n–ú–æ–π Telegram –∫–∞–Ω–∞–ª: [—Ç—ã–∫](https://t.me/florestchannel)\n–í—Å–µ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: [—Ç—ã–∫](https://taplink.cc/florestone4185)\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: [—Ç—ã–∫](https://github.com/florestdev/florestbot)\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [—Ç—ã–∫](https://t.me/postbotflorestbot?start={message.from_user.id})\n–ù–∞—à API: [—Ç—ã–∫](https://florestapi-florestdev4185.amvera.io)', reply_markup=markup1, parse_mode='MarkdownV2')
                    msg=bot.send_message(message.chat.id, f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞', reply_markup=buttons)
                    bot.reply_to(msg, f'–ù–∞ –±—É–¥—É—â–µ–µ, –≤–¥—Ä—É–≥ –º–µ–Ω—é –ø—Ä–æ–ø–∞–¥–µ—Ç.', reply_markup=types.ReplyKeyboardMarkup(True, input_field_placeholder=f'–°—ç—Ä, –¥–∞, —Å—ç—Ä.', row_width=1).add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
                else:
                    bot.reply_to(message, f'–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ Telegram –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è?\n–ü–æ—Ä–∞-–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ú–æ–π Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel'), types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_sub')))
            else:
                try:
                    id = int(message.text.split()[1])
                    if len(message.text.split()[1]) > 10:
                        bot.reply_to(message, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.')
                        if check_sub(message.from_user.id):
                            markup1 = types.InlineKeyboardMarkup(row_width=1)
                            button1 = types.InlineKeyboardButton(f'–ò–Ω—Ñ–∞ –æ –±–æ—Ç–µ', url='https://telegra.ph/INFORMACIYA-O-BOTE-06-27')
                            button21 = types.InlineKeyboardButton('Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel')
                            button31 = types.InlineKeyboardButton('–î—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã –§–ª–æ—Ä–µ—Å—Ç–∞', url='https://taplink.cc/florestone4185')
                            markup1.add(button1, button21, button31, types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º —Å –¥—Ä—É–≥–æ–º', f'https://t.me/share/url?url=https://t.me/postbotflorestbot?start={message.from_user.id}&&text=–ü—Ä–∏–≤–µ—Ç, —Å–æ–≤–µ—Ç—É—é —Ç–µ–±–µ —ç—Ç—É –∏–º–±—É–ª—å–∫—É! –¢–∞–º –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–Ω–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ!'))
                            try:
                                bot.send_photo(message.chat.id, open(path / 'obloshka_bota.jpg', 'rb'), caption=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\.\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\.\n\n–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 1 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ\-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π\.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR, –ø–∞—Ä–æ–ª–µ–π, –ø–æ–≥–æ–¥–∞, –ò–ò \(ChatGPT, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫\) –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n\n–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: /donate\n–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é: /support\n\n–ú–æ–π Telegram –∫–∞–Ω–∞–ª: [—Ç—ã–∫](https://t.me/florestchannel)\n–í—Å–µ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: [—Ç—ã–∫](https://taplink.cc/florestone4185)\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: [—Ç—ã–∫](https://github.com/florestdev/florestbot)\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [—Ç—ã–∫](https://t.me/postbotflorestbot?start={message.from_user.id})\n–ù–∞—à API: [—Ç—ã–∫](https://florestapi-florestdev4185.amvera.io)', reply_markup=markup1, parse_mode='MarkdownV2')
                            except:
                                bot.send_photo(message.chat.id, open(path / 'obloshka_bota.jpg', 'rb'), caption=f'–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\.\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\.\n\n–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 1 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ\-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π\.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR, –ø–∞—Ä–æ–ª–µ–π, –ø–æ–≥–æ–¥–∞, –ò–ò \(ChatGPT, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫\) –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n\n–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: /donate\n–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é: /support\n\n–ú–æ–π Telegram –∫–∞–Ω–∞–ª: [—Ç—ã–∫](https://t.me/florestchannel)\n–í—Å–µ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: [—Ç—ã–∫](https://taplink.cc/florestone4185)\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: [—Ç—ã–∫](https://github.com/florestdev/florestbot)\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [—Ç—ã–∫](https://t.me/postbotflorestbot?start={message.from_user.id})\n–ù–∞—à API: [—Ç—ã–∫](https://florestapi-florestdev4185.amvera.io)', reply_markup=markup1, parse_mode='MarkdownV2')
                            msg=bot.send_message(message.chat.id, f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞', reply_markup=buttons)
                            bot.reply_to(msg, f'–ù–∞ –±—É–¥—É—â–µ–µ, –≤–¥—Ä—É–≥ –º–µ–Ω—é –ø—Ä–æ–ø–∞–¥–µ—Ç.', reply_markup=types.ReplyKeyboardMarkup(True, input_field_placeholder=f'–°—ç—Ä, –¥–∞, —Å—ç—Ä.', row_width=1).add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
                        else:
                            bot.reply_to(message, f'–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ Telegram –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è?\n–ü–æ—Ä–∞-–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ú–æ–π Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel'), types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_sub')))
                    elif len(message.text.split()[1]) < 10:
                        bot.reply_to(message, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.')
                        if check_sub(message.from_user.id):
                            markup1 = types.InlineKeyboardMarkup(row_width=1)
                            button1 = types.InlineKeyboardButton(f'–ò–Ω—Ñ–∞ –æ –±–æ—Ç–µ', url='https://telegra.ph/INFORMACIYA-O-BOTE-06-27')
                            button21 = types.InlineKeyboardButton('Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel')
                            button31 = types.InlineKeyboardButton('–î—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã –§–ª–æ—Ä–µ—Å—Ç–∞', url='https://taplink.cc/florestone4185')
                            markup1.add(button1, button21, button31, types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º —Å –¥—Ä—É–≥–æ–º', f'https://t.me/share/url?url=https://t.me/postbotflorestbot?start={message.from_user.id}&&text=–ü—Ä–∏–≤–µ—Ç, —Å–æ–≤–µ—Ç—É—é —Ç–µ–±–µ —ç—Ç—É –∏–º–±—É–ª—å–∫—É! –¢–∞–º –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–Ω–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ!'))
                            try:
                                bot.send_photo(message.chat.id, open(path / 'obloshka_bota.jpg', 'rb'), caption=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\.\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\.\n\n–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 1 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ\-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π\.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR, –ø–∞—Ä–æ–ª–µ–π, –ø–æ–≥–æ–¥–∞, –ò–ò \(ChatGPT, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫\) –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n\n–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: /donate\n–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é: /support\n\n–ú–æ–π Telegram –∫–∞–Ω–∞–ª: [—Ç—ã–∫](https://t.me/florestchannel)\n–í—Å–µ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: [—Ç—ã–∫](https://taplink.cc/florestone4185)\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: [—Ç—ã–∫](https://github.com/florestdev/florestbot)\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [—Ç—ã–∫](https://t.me/postbotflorestbot?start={message.from_user.id})\n–ù–∞—à API: [—Ç—ã–∫](https://florestapi-florestdev4185.amvera.io)', reply_markup=markup1, parse_mode='MarkdownV2')
                            except:
                                bot.send_photo(message.chat.id, open(path / 'obloshka_bota.jpg', 'rb'), caption=f'–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\.\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\.\n\n–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 1 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ\-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π\.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR, –ø–∞—Ä–æ–ª–µ–π, –ø–æ–≥–æ–¥–∞, –ò–ò \(ChatGPT, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫\) –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n\n–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: /donate\n–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é: /support\n\n–ú–æ–π Telegram –∫–∞–Ω–∞–ª: [—Ç—ã–∫](https://t.me/florestchannel)\n–í—Å–µ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: [—Ç—ã–∫](https://taplink.cc/florestone4185)\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: [—Ç—ã–∫](https://github.com/florestdev/florestbot)\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [—Ç—ã–∫](https://t.me/postbotflorestbot?start={message.from_user.id})\n–ù–∞—à API: [—Ç—ã–∫](https://florestapi-florestdev4185.amvera.io)', reply_markup=markup1, parse_mode='MarkdownV2')
                            msg=bot.send_message(message.chat.id, f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞', reply_markup=buttons)
                            bot.reply_to(msg, f'–ù–∞ –±—É–¥—É—â–µ–µ, –≤–¥—Ä—É–≥ –º–µ–Ω—é –ø—Ä–æ–ø–∞–¥–µ—Ç.', reply_markup=types.ReplyKeyboardMarkup(True, input_field_placeholder=f'–°—ç—Ä, –¥–∞, —Å—ç—Ä.', row_width=1).add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
                        else:
                            bot.reply_to(message, f'–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ Telegram –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è?\n–ü–æ—Ä–∞-–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ú–æ–π Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel'), types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_sub')))
                    else:
                        if id != message.from_user.id:
                            try:
                                bot.send_message(id, f'–ü–æ –í–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª {message.from_user.full_name}.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!')
                            except:
                                pass
                            bot.reply_to(message, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞! –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª {bot.get_chat_member(telegram_channel_id, id).user.full_name} –≤ –±–æ—Ç–∞.')
                            if check_sub(message.from_user.id):
                                markup1 = types.InlineKeyboardMarkup(row_width=1)
                                button1 = types.InlineKeyboardButton(f'–ò–Ω—Ñ–∞ –æ –±–æ—Ç–µ', url='https://telegra.ph/INFORMACIYA-O-BOTE-06-27')
                                button21 = types.InlineKeyboardButton('Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel')
                                button31 = types.InlineKeyboardButton('–î—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã –§–ª–æ—Ä–µ—Å—Ç–∞', url='https://taplink.cc/florestone4185')
                                markup1.add(button1, button21, button31, types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º —Å –¥—Ä—É–≥–æ–º', f'https://t.me/share/url?url=https://t.me/postbotflorestbot?start={message.from_user.id}&&text=–ü—Ä–∏–≤–µ—Ç, —Å–æ–≤–µ—Ç—É—é —Ç–µ–±–µ —ç—Ç—É –∏–º–±—É–ª—å–∫—É! –¢–∞–º –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–Ω–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ!'))
                                try:
                                    bot.send_photo(message.chat.id, open(path / 'obloshka_bota.jpg', 'rb'), caption=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\.\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\.\n\n–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 1 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ\-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π\.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR, –ø–∞—Ä–æ–ª–µ–π, –ø–æ–≥–æ–¥–∞, –ò–ò \(ChatGPT, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫\) –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n\n–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: /donate\n–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é: /support\n\n–ú–æ–π Telegram –∫–∞–Ω–∞–ª: [—Ç—ã–∫](https://t.me/florestchannel)\n–í—Å–µ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: [—Ç—ã–∫](https://taplink.cc/florestone4185)\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: [—Ç—ã–∫](https://github.com/florestdev/florestbot)\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [—Ç—ã–∫](https://t.me/postbotflorestbot?start={message.from_user.id})\n–ù–∞—à API: [—Ç—ã–∫](https://florestapi-florestdev4185.amvera.io)', reply_markup=markup1, parse_mode='MarkdownV2')
                                except:
                                    bot.send_photo(message.chat.id, open(path / 'obloshka_bota.jpg', 'rb'), caption=f'–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\.\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\.\n\n–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 1 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ\-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π\.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR, –ø–∞—Ä–æ–ª–µ–π, –ø–æ–≥–æ–¥–∞, –ò–ò \(ChatGPT, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫\) –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n\n–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: /donate\n–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é: /support\n\n–ú–æ–π Telegram –∫–∞–Ω–∞–ª: [—Ç—ã–∫](https://t.me/florestchannel)\n–í—Å–µ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: [—Ç—ã–∫](https://taplink.cc/florestone4185)\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: [—Ç—ã–∫](https://github.com/florestdev/florestbot)\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [—Ç—ã–∫](https://t.me/postbotflorestbot?start={message.from_user.id})\n–ù–∞—à API: [—Ç—ã–∫](https://florestapi-florestdev4185.amvera.io)', reply_markup=markup1, parse_mode='MarkdownV2')
                                msg=bot.send_message(message.chat.id, f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞', reply_markup=buttons)
                                bot.reply_to(msg, f'–ù–∞ –±—É–¥—É—â–µ–µ, –≤–¥—Ä—É–≥ –º–µ–Ω—é –ø—Ä–æ–ø–∞–¥–µ—Ç.', reply_markup=types.ReplyKeyboardMarkup(True, input_field_placeholder=f'–°—ç—Ä, –¥–∞, —Å—ç—Ä.', row_width=1).add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
                            else:
                                bot.reply_to(message, f'–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ Telegram –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è?\n–ü–æ—Ä–∞-–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ú–æ–π Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel'), types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_sub')))
                        else:
                            bot.reply_to(message, f'–ù–µ–ª—å–∑—è –∑–∞–π—Ç–∏ –ø–æ —Å–≤–æ–µ–π –∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!')
                            if check_sub(message.from_user.id):
                                markup1 = types.InlineKeyboardMarkup(row_width=1)
                                button1 = types.InlineKeyboardButton(f'–ò–Ω—Ñ–∞ –æ –±–æ—Ç–µ', url='https://telegra.ph/INFORMACIYA-O-BOTE-06-27')
                                button21 = types.InlineKeyboardButton('Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel')
                                button31 = types.InlineKeyboardButton('–î—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã –§–ª–æ—Ä–µ—Å—Ç–∞', url='https://taplink.cc/florestone4185')
                                markup1.add(button1, button21, button31, types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º —Å –¥—Ä—É–≥–æ–º', f'https://t.me/share/url?url=https://t.me/postbotflorestbot?start={message.from_user.id}&&text=–ü—Ä–∏–≤–µ—Ç, —Å–æ–≤–µ—Ç—É—é —Ç–µ–±–µ —ç—Ç—É –∏–º–±—É–ª—å–∫—É! –¢–∞–º –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–Ω–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ!'))
                                try:
                                    bot.send_photo(message.chat.id, open(path / 'obloshka_bota.jpg', 'rb'), caption=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\.\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\.\n\n–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 1 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ\-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π\.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR, –ø–∞—Ä–æ–ª–µ–π, –ø–æ–≥–æ–¥–∞, –ò–ò \(ChatGPT, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫\) –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n\n–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: /donate\n–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é: /support\n\n–ú–æ–π Telegram –∫–∞–Ω–∞–ª: [—Ç—ã–∫](https://t.me/florestchannel)\n–í—Å–µ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: [—Ç—ã–∫](https://taplink.cc/florestone4185)\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: [—Ç—ã–∫](https://github.com/florestdev/florestbot)\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [—Ç—ã–∫](https://t.me/postbotflorestbot?start={message.from_user.id})\n–ù–∞—à API: [—Ç—ã–∫](https://florestapi-florestdev4185.amvera.io)', reply_markup=markup1, parse_mode='MarkdownV2')
                                except:
                                    bot.send_photo(message.chat.id, open(path / 'obloshka_bota.jpg', 'rb'), caption=f'–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\.\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\.\n\n–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 1 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ\-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π\.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR, –ø–∞—Ä–æ–ª–µ–π, –ø–æ–≥–æ–¥–∞, –ò–ò \(ChatGPT, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫\) –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n\n–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: /donate\n–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é: /support\n\n–ú–æ–π Telegram –∫–∞–Ω–∞–ª: [—Ç—ã–∫](https://t.me/florestchannel)\n–í—Å–µ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: [—Ç—ã–∫](https://taplink.cc/florestone4185)\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: [—Ç—ã–∫](https://github.com/florestdev/florestbot)\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [—Ç—ã–∫](https://t.me/postbotflorestbot?start={message.from_user.id})\n–ù–∞—à API: [—Ç—ã–∫](https://florestapi-florestdev4185.amvera.io)', reply_markup=markup1, parse_mode='MarkdownV2')
                                msg=bot.send_message(message.chat.id, f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞', reply_markup=buttons)
                                bot.reply_to(msg, f'–ù–∞ –±—É–¥—É—â–µ–µ, –≤–¥—Ä—É–≥ –º–µ–Ω—é –ø—Ä–æ–ø–∞–¥–µ—Ç.', reply_markup=types.ReplyKeyboardMarkup(True, input_field_placeholder=f'–°—ç—Ä, –¥–∞, —Å—ç—Ä.', row_width=1).add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
                            else:
                                bot.reply_to(message, f'–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ Telegram –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è?\n–ü–æ—Ä–∞-–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ú–æ–π Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel'), types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_sub')))
                except Exception as e:
                    print(e)
                    bot.reply_to(message, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞!')
                    if check_sub(message.from_user.id):
                        markup1 = types.InlineKeyboardMarkup(row_width=1)
                        button1 = types.InlineKeyboardButton(f'–ò–Ω—Ñ–∞ –æ –±–æ—Ç–µ', url='https://telegra.ph/INFORMACIYA-O-BOTE-06-27')
                        button21 = types.InlineKeyboardButton('Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel')
                        button31 = types.InlineKeyboardButton('–î—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã –§–ª–æ—Ä–µ—Å—Ç–∞', url='https://taplink.cc/florestone4185')
                        markup1.add(button1, button21, button31, types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º —Å –¥—Ä—É–≥–æ–º', f'https://t.me/share/url?url=https://t.me/postbotflorestbot?start={message.from_user.id}&&text=–ü—Ä–∏–≤–µ—Ç, —Å–æ–≤–µ—Ç—É—é —Ç–µ–±–µ —ç—Ç—É –∏–º–±—É–ª—å–∫—É! –¢–∞–º –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–Ω–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ!'))
                        try:
                            bot.send_photo(message.chat.id, open(path / 'obloshka_bota.jpg', 'rb'), caption=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\.\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\.\n\n–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 1 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ\-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π\.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR, –ø–∞—Ä–æ–ª–µ–π, –ø–æ–≥–æ–¥–∞, –ò–ò \(ChatGPT, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫\) –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n\n–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: /donate\n–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é: /support\n\n–ú–æ–π Telegram –∫–∞–Ω–∞–ª: [—Ç—ã–∫](https://t.me/florestchannel)\n–í—Å–µ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: [—Ç—ã–∫](https://taplink.cc/florestone4185)\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: [—Ç—ã–∫](https://github.com/florestdev/florestbot)\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [—Ç—ã–∫](https://t.me/postbotflorestbot?start={message.from_user.id})\n–ù–∞—à API: [—Ç—ã–∫](https://florestapi-florestdev4185.amvera.io)', reply_markup=markup1, parse_mode='MarkdownV2')
                        except:
                            bot.send_photo(message.chat.id, open(path / 'obloshka_bota.jpg', 'rb'), caption=f'–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\.\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\.\n\n–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 1 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ\-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π\.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR, –ø–∞—Ä–æ–ª–µ–π, –ø–æ–≥–æ–¥–∞, –ò–ò \(ChatGPT, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫\) –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\.\n\n–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: /donate\n–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é: /support\n\n–ú–æ–π Telegram –∫–∞–Ω–∞–ª: [—Ç—ã–∫](https://t.me/florestchannel)\n–í—Å–µ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: [—Ç—ã–∫](https://taplink.cc/florestone4185)\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: [—Ç—ã–∫](https://github.com/florestdev/florestbot)\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [—Ç—ã–∫](https://t.me/postbotflorestbot?start={message.from_user.id})\n–ù–∞—à API: [—Ç—ã–∫](https://florestapi-florestdev4185.amvera.io)', reply_markup=markup1, parse_mode='MarkdownV2')
                        msg=bot.send_message(message.chat.id, f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞', reply_markup=buttons)
                        bot.reply_to(msg, f'–ù–∞ –±—É–¥—É—â–µ–µ, –≤–¥—Ä—É–≥ –º–µ–Ω—é –ø—Ä–æ–ø–∞–¥–µ—Ç.', reply_markup=types.ReplyKeyboardMarkup(True, input_field_placeholder=f'–°—ç—Ä, –¥–∞, —Å—ç—Ä.', row_width=1).add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
                    else:
                        bot.reply_to(message, f'–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ Telegram –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è?\n–ü–æ—Ä–∞-–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ú–æ–π Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel'), types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_sub')))

@bot.message_handler(commands=['support'])
def support(message: types.Message):
    if message.chat.type == 'private':
        bot.reply_to(message, f'–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –ø–æ –ø–æ–≤–æ–¥—É –æ—à–∏–±–æ–∫ –±–æ—Ç–∞, –ª–∏–±–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.\n–ú–æ—è –ø–æ—á—Ç–∞: florestone4185@internet.ru\n–ú–æ–π Discord –∞–∫–∫–∞—É–Ω—Ç: florestdev\n–õ–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É', 'https://inlnk.ru/oeaxRw'), types.InlineKeyboardButton('–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞', callback_data='dialog-by-bot')))

def ai_obrabotchik(message: types.Message, type: int, mode: str = 'text'):
    if type == 1:
        if message.text:
            import requests, re, pathlib, sys
            url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

            payload={
                'scope': 'GIGACHAT_API_PERS'
            }
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/json',
                'RqUID': gigachat_id,
                'Authorization': f'Basic {gigachat_token}'
            }

            response = requests.request("POST", url, headers=headers, data=payload, verify=False)

            access_token = response.json()['access_token']

            headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': f'Bearer {access_token}'
            }

            data = {
                "model": "GigaChat",
                "messages": [
                    {
                        "role": "system",
                        "content": "Glory to Florest."
                    },
                    {
                        "role": "user",
                        "content": message.text
                    }
                ],
                "function_call": "auto"
            }

            patterns = r"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"

            response = requests.post(
                'https://gigachat.devices.sberbank.ru/api/v1/chat/completions',
                headers=headers,
                json=data,
                verify=False
            )
            json = response.json()
            matches = re.search(patterns, json['choices'][0]['message']['content'])
            if not matches:
                bot.reply_to(message, f"–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü—Ä–∏—á–∏–Ω–∞: {json['choices'][0]['message']['content'].lower()}", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥',callback_data='back')))
            else:
                match_ = matches.group(0)
                req_img = requests.get(f"https://gigachat.devices.sberbank.ru/api/v1/files/{match_}/content", headers={'Accept': 'application/jpg', "Authorization":f"Bearer {access_token}"}, verify=False, stream=True)
                bot.send_chat_action(message.chat.id, 'upload_photo')
                bot.send_photo(message.chat.id, req_img.content, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n–ú–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏. –ï—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –∏–ª–∏ –µ–≥–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                bot.clear_step_handler_by_chat_id(message.chat.id)
        else:
            bot.reply_to(message, f'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    if type == 2:
        if mode == 'text':
            if not message.reply_to_message:
                if message.text:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', callback_data='chat_zaversit'))
                    bot.send_chat_action(message.chat.id, 'typing')
                    import requests, json

                    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

                    payload={
                        'scope': 'GIGACHAT_API_PERS'
                    }
                    headers = {
                      'Content-Type': 'application/x-www-form-urlencoded',
                      'Accept': 'application/json',
                      'RqUID': gigachat_id,
                      'Authorization': f'Basic {gigachat_token}'
                    }

                    response = requests.request("POST", url, headers=headers, data=payload, verify=False)

                    access_token = response.json()['access_token']

                    url1 = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

                    payload1 = json.dumps({
                        "model": "GigaChat",
                        "messages": [
                            {
                                "role": "user",
                                "content": message.text
                            }
                        ],
                        "stream": False,
                        "repetition_penalty": 1
                    })
                    headers1 = {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': f'Bearer {access_token}'
                    }

                    response1 = requests.request("POST", url1, headers=headers1, data=payload1, verify=False)

                    result = response1.json()['choices'][0]['message']['content']

                    bot.reply_to(message, result, reply_markup=markup, parse_mode='Markdown')
                    bot.register_next_step_handler(message, ai_obrabotchik, 2, 'text')
                elif message.voice:
                    chislo = random.randint(1, 10000)
                    audio__ = open(path / f'audio_{chislo}.ogg', 'wb')
                    audio__.write(bot.download_file(bot.get_file(message.voice.file_id).file_path))
                    audio__.close()
                    subprocess.run(['ffmpeg', '-i', f'audio_{chislo}.ogg', f'audio_{chislo}.wav'])
                    try:
                        r = sr.Recognizer()
                        file = open(path / f'audio_{chislo}.wav', 'rb')
                        with sr.AudioFile(file) as source:
                            audio = r.record(source)
                        text = r.recognize_google(audio, language='ru-RU')
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', callback_data='chat_zaversit'))
                        bot.send_chat_action(message.chat.id, 'typing')
                        import requests, json

                        url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

                        payload={
                            'scope': 'GIGACHAT_API_PERS'
                        }
                        headers = {
                          'Content-Type': 'application/x-www-form-urlencoded',
                          'Accept': 'application/json',
                          'RqUID': gigachat_id,
                          'Authorization': f'Basic {gigachat_token}'
                        }

                        response = requests.request("POST", url, headers=headers, data=payload, verify=False)

                        access_token = response.json()['access_token']

                        url1 = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

                        payload1 = json.dumps({
                            "model": "GigaChat",
                            "messages": [
                                {
                                    "role": "user",
                                    "content":text
                                }
                            ],
                            "stream": False,
                            "repetition_penalty": 1
                        })
                        headers1 = {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'Authorization': f'Bearer {access_token}'
                        }

                        response1 = requests.request("POST", url1, headers=headers1, data=payload1, verify=False)

                        result = response1.json()['choices'][0]['message']['content']

                        bot.reply_to(message, result, reply_markup=markup, parse_mode='Markdown')
                        bot.register_next_step_handler(message, ai_obrabotchik, 2, 'text')
                    except sr.UnknownValueError:
                        bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç', reply_markup='chat_zaversit')))
                        bot.register_next_step_handler(message, ai_obrabotchik, 2, 'text')
                    except:
                        bot.reply_to(message, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–≤–æ–¥–æ–º.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç', reply_markup='chat_zaversit')))
                        bot.register_next_step_handler(message, ai_obrabotchik, 2, 'text')
                    os.remove(path / f'audio_{chislo}.ogg')
                    os.remove(path / f'audio_{chislo}.wav')
            else:
                if message.text:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', callback_data='chat_zaversit'))
                    bot.send_chat_action(message.chat.id, 'typing')
                    import requests, json

                    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

                    payload={
                        'scope': 'GIGACHAT_API_PERS'
                    }
                    headers = {
                      'Content-Type': 'application/x-www-form-urlencoded',
                      'Accept': 'application/json',
                      'RqUID': gigachat_id,
                      'Authorization': f'Basic {gigachat_token}'
                    }

                    response = requests.request("POST", url, headers=headers, data=payload, verify=False)

                    access_token = response.json()['access_token']

                    url1 = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

                    payload1 = json.dumps({
                        "model": "GigaChat",
                        "messages": [
                            {
                                "role": "user",
                                "content": f'–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ: {message.reply_to_message.text}\n' + message.text
                            }
                        ],
                        "stream": False,
                        "repetition_penalty": 1
                    })
                    headers1 = {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': f'Bearer {access_token}'
                    }

                    response1 = requests.request("POST", url1, headers=headers1, data=payload1, verify=False)

                    result = response1.json()['choices'][0]['message']['content']

                    bot.reply_to(message, result, reply_markup=markup, parse_mode='Markdown')
                    bot.register_next_step_handler(message, ai_obrabotchik, 2, 'text')
                elif message.voice:
                    chislo = random.randint(1, 10000)
                    audio__ = open(path / f'audio_{chislo}.ogg', 'wb')
                    audio__.write(bot.download_file(bot.get_file(message.voice.file_id).file_path))
                    audio__.close()
                    subprocess.run(['ffmpeg', '-i', f'audio_{chislo}.ogg', f'audio_{chislo}.wav'])
                    try:
                        r = sr.Recognizer()
                        file = open(path / f'audio_{chislo}.wav', 'rb')
                        with sr.AudioFile(file) as source:
                            audio = r.record(source)
                        text = r.recognize_google(audio, language='ru-RU')
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', callback_data='chat_zaversit'))
                        bot.send_chat_action(message.chat.id, 'typing')
                        import requests, json

                        url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

                        payload={
                            'scope': 'GIGACHAT_API_PERS'
                        }
                        headers = {
                          'Content-Type': 'application/x-www-form-urlencoded',
                          'Accept': 'application/json',
                          'RqUID': gigachat_id,
                          'Authorization': f'Basic {gigachat_token}'
                        }

                        response = requests.request("POST", url, headers=headers, data=payload, verify=False)

                        access_token = response.json()['access_token']

                        url1 = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

                        payload1 = json.dumps({
                            "model": "GigaChat",
                            "messages": [
                                {
                                    "role": "user",
                                    "content":f'–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ: {message.reply_to_message.text}\n' + text
                                }
                            ],
                            "stream": False,
                            "repetition_penalty": 1
                        })
                        headers1 = {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                        'Authorization': f'Bearer {access_token}'
                        }

                        response1 = requests.request("POST", url1, headers=headers1, data=payload1, verify=False)

                        result = response1.json()['choices'][0]['message']['content']

                        bot.reply_to(message, result, reply_markup=markup, parse_mode='Markdown')
                        bot.register_next_step_handler(message, ai_obrabotchik, 2, 'text')
                    except sr.UnknownValueError:
                        bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç', reply_markup='chat_zaversit')))
                        bot.register_next_step_handler(message, ai_obrabotchik, 2, 'text')
                    except:
                        bot.reply_to(message, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–≤–æ–¥–æ–º.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç', reply_markup='chat_zaversit')))
                        bot.register_next_step_handler(message, ai_obrabotchik, 2, 'text')
                    os.remove(path / f'audio_{chislo}.ogg')
                    os.remove(path / f'audio_{chislo}.wav')
        else:
            if message.text:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', callback_data='chat_zaversit'))
                import requests, json

                url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

                payload={
                    'scope': 'GIGACHAT_API_PERS'
                }
                headers = {
                  'Content-Type': 'application/x-www-form-urlencoded',
                  'Accept': 'application/json',
                  'RqUID': gigachat_id,
                  'Authorization': f'Basic {gigachat_token}'
                }

                response = requests.request("POST", url, headers=headers, data=payload, verify=False)

                access_token = response.json()['access_token']

                url1 = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

                payload1 = json.dumps({
                    "model": "GigaChat",
                    "messages": [
                        {
                            "role": "user",
                            "content": message.text + "\n–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                        }
                    ],
                    "stream": False,
                    "repetition_penalty": 1
                })
                headers1 = {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': f'Bearer {access_token}'
                }

                response1 = requests.request("POST", url1, headers=headers1, data=payload1, verify=False)

                result = response1.json()['choices'][0]['message']['content']

                buffer = io.BytesIO()
                gTTS(result, lang='ru', lang_check=False).write_to_fp(buffer)
                bot.send_chat_action(message.chat.id, 'record_voice')
                bot.send_voice(message.chat.id, buffer.getvalue(), reply_markup=markup)
                del buffer
                bot.register_next_step_handler(message, ai_obrabotchik, 2, 'voice')
            elif message.voice:
                chislo = random.randint(1, 10000)
                audio__ = open(path / f'audio_{chislo}.ogg', 'wb')
                audio__.write(bot.download_file(bot.get_file(message.voice.file_id).file_path))
                audio__.close()
                subprocess.run(['ffmpeg', '-i', f'audio_{chislo}.ogg', f'audio_{chislo}.wav'])
                try:
                    r = sr.Recognizer()
                    file = open(path / f'audio_{chislo}.wav', 'rb')
                    with sr.AudioFile(file) as source:
                        audio = r.record(source)
                    text = r.recognize_google(audio, language='ru-RU')
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', callback_data='chat_zaversit'))
                    bot.send_chat_action(message.chat.id, 'send_voice')
                    import requests, json

                    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

                    payload={
                        'scope': 'GIGACHAT_API_PERS'
                    }
                    headers = {
                      'Content-Type': 'application/x-www-form-urlencoded',
                      'Accept': 'application/json',
                      'RqUID': gigachat_id,
                      'Authorization': f'Basic {gigachat_token}'
                    }
                    response = requests.request("POST", url, headers=headers, data=payload, verify=False)

                    access_token = response.json()['access_token']

                    url1 = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

                    payload1 = json.dumps({
                        "model": "GigaChat",
                        "messages": [
                            {
                                "role": "user",
                                "content":text + "\n–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                            }
                        ],
                        "stream": False,
                        "repetition_penalty": 1
                    })
                    headers1 = {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': f'Bearer {access_token}'
                    }

                    response1 = requests.request("POST", url1, headers=headers1, data=payload1, verify=False)

                    result = response1.json()['choices'][0]['message']['content']
                    buffer = io.BytesIO()
                    gTTS(result, lang='ru', lang_check=False).write_to_fp(buffer)
                    bot.send_voice(message.chat.id, buffer.getvalue(), reply_markup=markup)
                    del buffer
                    bot.register_next_step_handler(message, ai_obrabotchik, 2, 'voice')
                except sr.UnknownValueError:
                    bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç', reply_markup='chat_zaversit')))
                    bot.register_next_step_handler(message, ai_obrabotchik, 2, 'voice')
                except:
                    bot.reply_to(message, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–≤–æ–¥–æ–º.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç', reply_markup='chat_zaversit')))
                    bot.register_next_step_handler(message, ai_obrabotchik, 2, 'voice')
                os.remove(path / f'audio_{chislo}.ogg')
                os.remove(path / f'audio_{chislo}.wav')

@bot.message_handler(commands=['admin_panel'])
def admin_panel(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id != 7455363246:
            bot.reply_to(message, f'–û—à–∏–±–∫–∞! –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞.')
        else:
            bot.reply_to(message, f'–ó–¥–∞—Ä–æ–≤, –§–ª–æ—Ä–µ—Å—Ç.\n–ù–∏–∂–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π.', protect_content=True, reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ/–∫–∞–Ω–∞–ª', callback_data='ban-video'), types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É', callback_data='add_keyboard_admin_panel')))

@bot.message_handler(commands=['donate'])
def send_donate(message: types.Message):
    if message.chat.type == 'private':
        bot.send_photo(message.chat.id, open(path / 'qr-donations.jpg','rb'), f'–ü—Ä–∏–≤–µ—Ç! –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –í—ã –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –§–ª–æ—Ä–µ—Å—Ç—É.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å QR –∫–æ–¥–æ–º –≤—ã—à–µ, –ª–∏–±–æ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('DonationAlerts', url='https://donationalerts.com/r/florestdev4185'), types.InlineKeyboardButton('–ó–≤–µ–∑–¥—ã Telegram', callback_data='tg-stars_callback'), types.InlineKeyboardButton('–ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫ USDT$', callback_data='crypto-wallet'), types.InlineKeyboardButton('–ÆMoney', callback_data='yoomoney-payment')))

@bot.message_handler(commands=['ban'])
def ban_cmd(message: types.Message):
    if not message.forward_from and not message.forward_from:
        if message.chat.type != 'supergroup':
            bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ.')
        else:
            if message.chat.id != chat_id:
                bot.reply_to(message, f'–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ "FlorestBot" —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ "FlorestChat" (@florestchannelgroup).')
                bot.leave_chat(message.chat.id)
            else:
                if bot.get_chat_member(message.chat.id, message.from_user.id).status not in ['administrator', 'owner'] and message.from_user.username != 'GroupAnonymousBot':
                    bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø—ã "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã".')
                else:
                    if message.reply_to_message:
                        if bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id).status in ['member', 'restricted']:
                            bot.kick_chat_member(message.chat.id, message.reply_to_message.from_user.id)
                            bot.reply_to(message, f'[!] –£—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∏–º–µ–Ω–µ–º {message.reply_to_message.from_user.first_name}.')
                        else:
                            bot.reply_to(message, f'[!] –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä–∏—â –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–æ –¥–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ª–∏–±–æ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ª–∏–±–æ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n–ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –≥—Ä—É–ø–ø—ã, –∞ —Ç–∞–∫–∂–µ Telegram –∫–∞–Ω–∞–ª–∞.')
                    else:
                        bot.reply_to(message, '–ù–æ—É, –Ω–æ—É, –Ω–æ—É, –º–∏—Å—Ç–µ—Ä —Ñ–∏—à, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.')

@bot.message_handler(commands=['unban'])
def unban_cmd(message: types.Message):
    if not message.forward_from and not message.forward_from:
        if message.chat.type != 'supergroup':
            bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ.')
        else:
            if message.chat.id != chat_id:
                bot.reply_to(message, f'–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ "FlorestBot" —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ "FlorestChat" (@florestchannelgroup).')
                bot.leave_chat(message.chat.id)
            else:
                if bot.get_chat_member(message.chat.id, message.from_user.id).status not in ['administrator', 'owner'] and message.from_user.username != 'GroupAnonymousBot':
                    bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø—ã "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã".')
                else:
                    if message.reply_to_message:
                        if bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id) == 'kicked':
                            bot.unban_chat_member(message.chat.id, message.reply_to_message.from_user.id, True)
                            bot.reply_to(message, f'[!] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {message.reply_to_message.from_user.first_name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')
                        else:
                            bot.reply_to(message, f'{message.reply_to_message.from_user.first_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.')
                    else:
                        bot.reply_to(message, '–ù–æ—É, –Ω–æ—É, –Ω–æ—É, –º–∏—Å—Ç–µ—Ä —Ñ–∏—à, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.')

@bot.message_handler(commands=['mute'])
def mute_cmd(message: types.Message):
    if not message.forward_from and not message.forward_from:
        if message.chat.type != 'supergroup':
            bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ.')
        else:
            if message.chat.id != chat_id:
                bot.reply_to(message, f'–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ "FlorestBot" —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ "FlorestChat" (@florestchannelgroup).')
                bot.leave_chat(message.chat.id)
            else:
                if bot.get_chat_member(message.chat.id, message.from_user.id).status not in ['administrator', 'owner'] and message.from_user.username != 'GroupAnonymousBot':
                    bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø—ã "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã".')
                else:
                    if message.reply_to_message:
                        if bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id).status != 'member':
                            bot.reply_to(message, f'–≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —É–∂–µ –Ω–µ—Ç –≤ –≥—Ä—É–ø–ø–µ, –ª–∏–±–æ –æ–Ω —É–∂–µ –∑–∞–º—å—é—á–µ–Ω, –∏–ª–∏ –æ–Ω –∞–¥–º–∏–Ω.\n–ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞, —Ç–æ —Å–æ–æ–±—â–∏—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–∞–Ω–∞–ª–∞, –∞ —Ç–∞–∫–∂–µ –≥—Ä—É–ø–ø—ã.')
                        else:
                            bot.reply_to(message, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.\n–ü—Ä–∏–º–µ—Ä: 1000.\n–õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "infinity" –¥–ª—è –º—å—é—Ç–∞ –Ω–∞ –≤–µ—á–Ω–æ.')
                            bot.register_next_step_handler(message, mute_human, message.reply_to_message.from_user.id)
                    else:
                        bot.reply_to(message, '–ù–æ—É, –Ω–æ—É, –Ω–æ—É, –º–∏—Å—Ç–µ—Ä —Ñ–∏—à, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.')
@bot.message_handler(commands=['unmute'])
def unmute_cmd(message: types.Message):
    if not message.forward_from and not message.forward_from:
        if message.chat.type != 'supergroup':
            bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ.')
        else:
            if message.chat.id != chat_id:
                bot.reply_to(message, f'–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ "FlorestBot" —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ "FlorestChat" (@florestchannelgroup).')
                bot.leave_chat(message.chat.id)
            else:
                if bot.get_chat_member(message.chat.id, message.from_user.id).status not in ['administrator', 'owner'] and message.from_user.username != 'GroupAnonymousBot':
                    bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø—ã "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã".')
                else:
                    if message.reply_to_message:
                        if bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id).status != 'restricted':
                            bot.reply_to(message, f'{message.reply_to_message.from_user.first_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö.')
                        else:
                            bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, None, True, True, True, True, True, False, False, False)
                            bot.reply_to(message, f'{message.reply_to_message.from_user.first_name} –±—ã–ª(–∞) —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω(–∞) –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.')
                    else:
                        bot.reply_to(message, '–ù–æ—É, –Ω–æ—É, –Ω–æ—É, –º–∏—Å—Ç–µ—Ä —Ñ–∏—à, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.')
@bot.message_handler(commands=['delete_messages'])
def del_msgs_cmd(message: types.Message):
    if not message.forward_from and not message.forward_from:
        if message.chat.type != 'supergroup':
            bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ.')
        else:
            if message.chat.id != chat_id:
                bot.reply_to(message, f'–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ "FlorestBot" —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ "FlorestChat" (@florestchannelgroup).')
                bot.leave_chat(message.chat.id)
            else:
                if bot.get_chat_member(message.chat.id, message.from_user.id).status not in ['administrator', 'owner'] and message.from_user.username != 'GroupAnonymousBot':
                    bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø—ã "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã".')
                else:
                    bot.reply_to(message, f'–•–æ—Ä–æ—à–æ! –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ —É–¥–∞–ª–µ–Ω–∏—é.\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –±–æ–ª–µ–µ —á–µ–º 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑, –∞ —Ç–∞–∫–∂–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–º –±–æ–ª—å—à–µ –¥–≤—É—Ö —Å—É—Ç–æ–∫.')
                    bot.register_next_step_handler(message, delete_messages_bro)

@bot.message_handler(content_types=['text'])
def text_obrabbbb(message: types.Message):
    if message.chat.type == 'private':
        if message.text == 'üè°–í –º–µ–Ω—é':
            if check_sub(message.from_user.id):
                bot.send_message(message.chat.id, f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞', reply_markup=buttons)
            else:
                bot.reply_to(message, f'–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ Telegram –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è?\n–ü–æ—Ä–∞-–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!', reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–ú–æ–π Telegram –∫–∞–Ω–∞–ª', 'https://t.me/florestchannel'), types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_sub')))
        else:
            if message.reply_to_message:
                if message.from_user.id == 7455363246:
                    try:
                        bot.send_message(message.reply_to_message.text.split()[-1], f'–û—Ç–≤–µ—Ç –æ—Ç –§–ª–æ—Ä–µ—Å—Ç–∞: {message.text}')
                    except:
                        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ª–∏–±–æ —Å–ª—É—á–∏–ª–æ—Å—å —á—Ç–æ-—Ç–æ –µ—â–µ.')
                else:
                    pass
            else:
                pass
    else:
        if message.chat.id != chat_id:
            pass
        else:
            if message.voice:
                bot.send_chat_action(message.chat.id, 'typing')
                chislo = random.randint(1, 10000)
                audio__ = open(path / f'audio_{chislo}.ogg', 'wb')
                audio__.write(bot.download_file(bot.get_file(message.voice.file_id).file_path))
                audio__.close()
                subprocess.run(['ffmpeg', '-i', f'audio_{chislo}.ogg', f'audio_{chislo}.wav'])
                try:
                    r = sr.Recognizer()
                    file = open(path / f'audio_{chislo}.wav', 'rb')
                    with sr.AudioFile(file) as source:
                        audio = r.record(source)
                    text = r.recognize_google(audio, language='ru-RU')
                    bot.reply_to(message, f'–í –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–∫–∞–∑–∞–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ: `{text}`.', parse_mode='Markdown')
                except sr.UnknownValueError:
                    bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –¥–∞–Ω–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.')
                except Exception as e:
                    bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–∫–∏–Ω—å—Ç–µ –Ω–∞–º –∫–æ–¥ –æ—à–∏–±–∫–∏.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: `{e}`', parse_mode='Markdown')
                os.remove(path / f'audio_{chislo}.ogg')
                os.remove(path / f'audio_{chislo}.wav')
            elif message.video_note:
                bot.send_chat_action(message.chat.id, 'typing')
                chislo = random.randint(1, 10000)
                video__ = open(path / f'video_{chislo}.mp4', 'wb')
                video__.write(bot.download_file(bot.get_file(message.video_note.file_id).file_path))
                video__.close()
                subprocess.run(['ffmpeg', '-i', f'video_{chislo}.mp4', f'video_{chislo}.wav'])
                try:
                    r = sr.Recognizer()
                    file = open(path / f'video_{chislo}.wav', 'rb')
                    with sr.AudioFile(file) as source:
                        audio = r.record(source)
                    text = r.recognize_google(audio, language='ru-RU')
                    bot.reply_to(message, f'–í –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–∫–∞–∑–∞–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ: `{text}`.', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                except sr.UnknownValueError:
                    bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –¥–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–∏.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                except Exception as e:
                    bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–∫–∏–Ω—å—Ç–µ –Ω–∞–º –∫–æ–¥ –æ—à–∏–±–∫–∏.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: `{e}`', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                os.remove(path / f'video_{chislo}.mp4')
                os.remove(path / f'video_{chislo}.wav')
            elif message.video:
                bot.send_chat_action(message.chat.id, 'typing')
                if message.video.duration > 600:
                    bot.reply_to(message, f'–í–∏–¥–µ–æ –¥–ª–∏—Ç—å—Å—è –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –µ–≥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                else:
                    chislo = random.randint(1, 10000)
                    video__ = open(path / f'video_{chislo}.mp4', 'wb')
                    video__.write(bot.download_file(bot.get_file(message.video.file_id).file_path))
                    video__.close()
                    subprocess.run(['ffmpeg', '-i', f'video_{chislo}.mp4',  f'video_{chislo}.wav'])
                    try:
                        r = sr.Recognizer()
                        file = open(path / f'video_{chislo}.wav', 'rb')
                        with sr.AudioFile(file) as source:
                            audio = r.record(source)
                        text = r.recognize_google(audio, language='ru-RU')
                        bot.reply_to(message, f'–í –≤–∏–¥–µ–æ —Å–∫–∞–∑–∞–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ: `{text}`.', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                    except sr.UnknownValueError:
                        bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –¥–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                    except Exception as e:
                        bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–∫–∏–Ω—å—Ç–µ –Ω–∞–º –∫–æ–¥ –æ—à–∏–±–∫–∏.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: `{e}`', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                    os.remove(path / f'video_{chislo}.mp4')
                    os.remove(path / f'video_{chislo}.wav')
            else:
                pass
            if message.forward_from_chat and message.forward_from_chat.type == 'channel':
                    if message.forward_from_chat.username == 'florestchannel':
                        pass
                    else:
                        bot.delete_message(message.chat.id, message.id)
            elif bot.get_chat_member(message.chat.id, message.from_user.id).status == 'member':
                if message.entities:
                    for entities in message.entities:
                        if entities.type in ['url', 'text_link']:
                            bot.delete_message(message.chat.id, message.id)
                            bot.send_message(message.chat.id, f'{message.from_user.first_name} –±—ã–ª(–∞) –æ–≥—Ä–∞–Ω–∏—á–µ–Ω(–∞) –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–æ–∫.\n–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ª—é–±—ã–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')
                            bot.restrict_chat_member(message.chat.id, message.from_user.id, time.time()+900, False, False, False, False, False, False, False, False)
                        elif entities.type == 'phone_number':
                            bot.delete_message(message.chat.id, message.id)
                            bot.send_message(message.chat.id, f'{message.from_user.first_name} –±—ã–ª(–∞) –æ–≥—Ä–∞–Ω–∏—á–µ–Ω(–∞) –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ 5 —á–∞—Å–æ–≤.')
                            bot.restrict_chat_member(message.chat.id, message.from_user.id, time.time()+18000, False, False, False, False, False, False, False, False)
                        else:
                            pass
                else:
                    pass
            if message.text:
                if bot.get_chat_member(message.chat.id, message.from_user.id).status == 'member':
                    if check_text(message.text):
                        bot.delete_message(message.chat.id, message.id)
                        bot.send_message(message.chat.id, f'{message.from_user.first_name}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞.\n–û–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –∞ —Ç–∞–∫–∂–µ –í—ã –±—ã–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –Ω–∞ 15 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –í—ã –Ω–µ –Ω–∞—Ä—É—à–∞–ª–∏ –ø—Ä–∞–≤–∏–ª–∞, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
                        bot.restrict_chat_member(message.chat.id, message.from_user.id, time.time()+900, False, False, False, False, False, False, False, False)
                    else:
                        pass
                else:
                    if check_text(message.text):
                        bot.reply_to(message, f'[!] –î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.')
                    else:
                        pass
            else:
                pass

@bot.message_handler(content_types=['new_chat_members', 'left_chat_member'])
def new_member(message: types.Message):
    bot.delete_message(message.chat.id, message.id)
    if message.chat.id == chat_id:
        if message.new_chat_members:
            for i in message.new_chat_members:
                bot.send_message(message.chat.id, f'{i.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "FlorestChat"!\n–ü—Ä–æ—Å–∏–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—â–µ–Ω–∏—è, –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∏–∑–∏—Ç –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã!\n–°–µ–π—á–∞—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {str(bot.get_chat_member_count(chat_id))}')
        else:
            bot.send_message(message.chat.id, f'{message.left_chat_member.full_name} –ø–æ–∫–∏–Ω—É–ª(–∞) –≥—Ä—É–ø–ø—É.\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å –Ω–∞–º–∏!\n–°–µ–π—á–∞—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {str(bot.get_chat_member_count(chat_id))}')

@bot.chat_join_request_handler(lambda query: True)
def request_to_group(request: types.ChatJoinRequest):
    if request.chat.id != group_id:
        pass
    else:
        bot.send_message(request.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {request.from_user.first_name}!\n–î–ª—è –≤—Ö–æ–¥–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ: https://telegra.ph/Pravila-gruppy-FlorestChat-11-13\n\n–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –Ω–∏–º–∏?', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–°–æ–≥–ª–∞—Å–µ–Ω', callback_data='sogl_group_rules')))

def generate_qr__(message: types.Message):
    if message.text:
        qr = create_qr(message.text)
        i1 = io.BytesIO()
        qr.save(i1, scale=10)
        qr.seek(0)
        bot.send_photo(message.chat.id, i1.getvalue(), f'–í–∞—à QR –∫–æ–¥.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    else:
        bot.reply_to(message, f'–ù–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –í–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        send_reaction(message.chat.id, message.id, 'üö´')   


def get_weather(message: types.Message):
    if message.text:
        try:
            d = requests.get(f'https://geocoding-api.open-meteo.com/v1/search?name={message.text}', proxies=proxies, headers=headers_for_html_requests).json()
            lot = d["results"][0]["latitude"]
            lat = d['results'][0]['longitude']
            req = requests.get(f'https://api.open-meteo.com/v1/forecast?latitude={lot}&longitude={lat}&current_weather=true', headers=headers_for_html_requests, proxies=proxies)
            if req.status_code != 200:
                bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.\n–í—ã –ª–∏–±–æ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –ª–∏–±–æ —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –Ω–∞—à–∏–º API.\n–ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))
                bot.clear_step_handler_by_chat_id(message.chat.id)
                send_reaction(message.chat.id, message.id, "ü§∑")
            else: 
                data = req.json()
                temperature = data['current_weather']['temperature']
                title = {0: "–Ø—Å–Ω–æ", 1: "–ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–ª–∞—á–Ω–æ", 3: "–û–±–ª–∞—á–Ω–æ", 61: "–î–æ–∂–¥—å"}
                weather = title.get(data['current_weather']['weathercode'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                wind_dir = '–°–µ–≤–µ—Ä' if 0 <= (d := data['current_weather']['winddirection']) < 45 or 315 <= d <= 360 else '–í–æ—Å—Ç–æ–∫' if 45 <= d < 135 else '–Æ–≥' if 135 <= d < 225 else '–ó–∞–ø–∞–¥'
                time1 = data['current_weather']['time']
                wind = data['current_weather']['windspeed']
                bot.reply_to(message, f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –í–∞—à–µ–º—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É.\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `{temperature} ¬∞C`\n–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã: `{weather}` (–∫–æ–¥ OpenMeteo: `{data["current_weather"]["weathercode"]}`)\n–í—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞: `{time1}`\n–í–µ—Ç–µ—Ä: `{wind}` –∫–º/—á\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: `{wind_dir}`', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')), parse_mode='Markdown')
        except:
            bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.\n–í—ã –ª–∏–±–æ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –ª–∏–±–æ —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –Ω–∞—à–∏–º API.\n–ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))
            bot.clear_step_handler_by_chat_id(message.chat.id)
            send_reaction(message.chat.id, message.id, "ü§∑")   
    elif message.location:
        try:
            req = requests.get(f'https://api.open-meteo.com/v1/forecast?latitude={message.location.latitude}&longitude={message.location.longitude}&current_weather=true', headers=headers_for_html_requests, proxies=proxies)
            if req.status_code != 200:
                bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.\n–í—ã –ª–∏–±–æ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –ª–∏–±–æ —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –Ω–∞—à–∏–º API.\n–ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))
                bot.clear_step_handler_by_chat_id(message.chat.id)
                send_reaction(message.chat.id, message.id, "ü§∑")
            else: 
                data = req.json()
                temperature = data['current_weather']['temperature']
                title = {0: "–Ø—Å–Ω–æ", 1: "–ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–ª–∞—á–Ω–æ", 3: "–û–±–ª–∞—á–Ω–æ", 61: "–î–æ–∂–¥—å"}
                weather = title.get(data['current_weather']['weathercode'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                wind_dir = '–°–µ–≤–µ—Ä' if 0 <= (d := data['current_weather']['winddirection']) < 45 or 315 <= d <= 360 else '–í–æ—Å—Ç–æ–∫' if 45 <= d < 135 else '–Æ–≥' if 135 <= d < 225 else '–ó–∞–ø–∞–¥'
                time1 = data['current_weather']['time']
                wind = data['current_weather']['windspeed']
                city_ = requests.get(f"https://nominatim.openstreetmap.org/reverse?lat={message.location.latitude}&lon={message.location.longitude}&format=json", headers={"Accept-Language":"ru-RU", "User-Agent":"FlorestApplication"}, proxies=proxies).json()["address"]["city"]
                bot.reply_to(message, f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –í–∞—à–µ–º—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É.\n–ì–æ—Ä–æ–¥: `{city_}`\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `{temperature} ¬∞C`\n–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã: `{weather}` (–∫–æ–¥ OpenMeteo: `{data["current_weather"]["weathercode"]}`)\n–í—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞: `{time1}`\n–í–µ—Ç–µ—Ä: `{wind}` –∫–º/—á\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: `{wind_dir}`', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')), parse_mode='Markdown')
        except:
            bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.\n–í—ã –ª–∏–±–æ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –ª–∏–±–æ —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –Ω–∞—à–∏–º API.\n–ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))
            bot.clear_step_handler_by_chat_id(message.chat.id)
            send_reaction(message.chat.id, message.id, "ü§∑")   
    else:
        bot.reply_to(message, f'–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –í–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≥–µ–æ–º–µ—Ç–∫—É.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        send_reaction(message.chat.id, message.id, "ü§∑")      

def create_voice_by_text(message: types.Message):
    if not message.text:
        bot.reply_to(message, f'–ù–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤ –í–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        send_reaction(message.chat.id, message.id, "ü§∑")   
    else:
        try:
            bot.send_chat_action(message.chat.id, 'record_voice')
            engine = gTTS(message.text, lang='ru')
            bytes_ = io.BytesIO()
            engine.write_to_fp(bytes_)
            bot.send_voice(message.chat.id, bytes_.getvalue(), caption=f'–ò–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å.\n–ü–æ –∑–∞–ø—Ä–æ—Å—É: {message.text}', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')), reply_to_message_id=message.id)
        except Exception as e:
            bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ï—Å–ª–∏ –≤—ã –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö, –∏–ª–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ–Ω—Ñ–µ–¥–∏—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))
            send_reaction(message.chat.id, message.id, "ü§∑")   

def ban_video_fl(message: types.Message):
    bot.reply_to(message, f'–í–Ω–µ—Å–ª–∏ –≤–∏–¥–µ–æ –≤ –±–ª–æ–∫–ª–∏—Å—Ç.')
    file = open(path / 'banned_youtube.txt', 'a')
    file.write(f'\n{message.text}')
    file.close()

def ban_channel_fl(message: types.Message):
    bot.reply_to(message, f'–í–Ω–µ—Å–ª–∏ –∫–∞–Ω–∞–ª –≤ –±–ª–æ–∫–ª–∏—Å—Ç.')
    file = open('prohibitions/banned_authors.txt', 'a')
    file.write(f'\n{message.text}')
    file.close()

def add_user_to_txt(message: types.Message):
    if message.text:
        bot.reply_to(message, f'–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ TXT —Ñ–∞–π–ª.')
        with open(path / 'banned_users.txt', 'a') as file:
            file.write(f'\n{message.text}')
            file.close()
    else:
        bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±–∞–∑—É.')

def message_hndlr(message: types.Message):
    bot.register_next_step_handler(message, message_hndlr)
    if not message.from_user.id in admins:
        if message.text:
            for _ in users:
                if _ == message.from_user.id:
                    pass
                else:
                    bot.send_message(_, f'{message.text}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name} ({message.from_user.id})', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help')))
        elif message.voice:
            for __ in users:
                if __ == message.from_user.id:
                    pass
                else:
                    bot.send_voice(__, bot.download_file(bot.get_file(message.voice.file_id).file_path), f'–ê—É–¥–∏–æ –æ—Ç {message.from_user.first_name} ({message.from_user.id})', duration=message.voice.duration, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help')))
        elif message.contact:
            for ____ in users:
                if ____ == message.from_user.id:
                    pass
                else:
                    bot.send_message(____, f'–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name} ({message.from_user.id})')
                    bot.send_contact(____, message.contact.phone_number, message.contact.first_name, message.contact.last_name, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help')))
        elif message.sticker:
            for _____ in users:
                if _____ == message.from_user.id:
                    pass
                else:
                    bot.send_message(_____, f'–°—Ç–∏–∫–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name} ({message.from_user.id})')
                    bot.send_sticker(_____, bot.download_file(bot.get_file(message.sticker.file_id).file_path), reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help')), emoji='ü§ñ')
        elif message.photo:
            for ______ in users:
                if ______ == message.from_user.id:
                    pass
                else:
                    bot.send_photo(______, bot.download_file(bot.get_file(message.photo[0].file_id).file_path), caption=f'–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name} ({message.from_user.id})', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help')))
        elif message.video_note:
            for ________ in users:
                if ________ == message.from_user.id:
                    pass
                else:
                    bot.send_message(________, f'–ö—Ä—É–∂–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name} ({message.from_user.id})')
                    bot.send_video_note(________, bot.download_file(bot.get_file(message.video_note.file_id).file_path), duration=message.video_note.duration, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help')))
        elif message.location:
            for _________ in users:
                if _________ == message.from_user.id:
                    pass
                else:
                    bot.send_message(_________, f'–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name} ({message.from_user.id})')
                    bot.send_location(_________, message.location.latitude, message.location.longitude, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help'))) 
        else:
            bot.reply_to(message, f'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å—Ç–∏–∫–µ—Ä—ã, –∫—Ä—É–∂–∫–∏, —Ñ–æ—Ç–æ, –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.')
    else:
        if message.text:
            for _ in users:
                if _ == message.from_user.id:
                    pass
                else:
                    bot.send_message(_, f'{message.text}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ADMIN`–∞.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help')))
        elif message.voice:
            for __ in users:
                if __ == message.from_user.id:
                    pass
                else:
                    bot.send_voice(__, bot.download_file(bot.get_file(message.voice.file_id).file_path), f'–ê—É–¥–∏–æ –æ—Ç ADMIN`a.', duration=message.voice.duration, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help')))
        elif message.contact:
            for ____ in users:
                if ____ == message.from_user.id:
                    pass
                else:
                    bot.send_message(____, f'–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç ADMIN`–∞.')
                    bot.send_contact(____, message.contact.phone_number, message.contact.first_name, message.contact.last_name, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help')))
        elif message.sticker:
            for _____ in users:
                if _____ == message.from_user.id:
                    pass
                else:
                    bot.send_message(_____, f'–°—Ç–∏–∫–µ—Ä –æ—Ç ADMIN`–∞.')
                    bot.send_sticker(_____, bot.download_file(bot.get_file(message.sticker.file_id).file_path), reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help')), emoji='ü§ñ')
        elif message.photo:
            for ______ in users:
                if ______ == message.from_user.id:
                    pass
                else:
                    bot.send_photo(______, bot.download_file(bot.get_file(message.photo[0].file_id).file_path), caption=f'–§–æ—Ç–æ –æ—Ç ADMIN`–∞.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help')))
        elif message.video_note:
            for ________ in users:
                if ________ == message.from_user.id:
                    pass
                else:
                    bot.send_message(________, f'–ö—Ä—É–∂–æ–∫ –æ—Ç ADMIN`–∞.')
                    bot.send_video_note(________, bot.download_file(bot.get_file(message.video_note.file_id).file_path), duration=message.video_note.duration, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help')))
        elif message.location:
            for _________ in users:
                if _________ == message.from_user.id:
                    pass
                else:
                    bot.send_message(_________, f'–õ–æ–∫–∞—Ü–∏—è ADMIN`a.')
                    bot.send_location(_________, message.location.latitude, message.location.longitude, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data='otmena_galya_chat'), types.InlineKeyboardButton('–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='help'))) 
        else:
            send_reaction(message.chat.id, message.id, "ü§∑")
            bot.reply_to(message, f'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å—Ç–∏–∫–µ—Ä—ã, –∫—Ä—É–∂–∫–∏, —Ñ–æ—Ç–æ, –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.')

@bot.pre_checkout_query_handler(lambda query: True)
def ___(pre_chekout: types.PreCheckoutQuery):
    bot.answer_pre_checkout_query(pre_chekout.id, True)

@bot.message_handler(content_types=['successful_payment'])
def success_pay(message: types.Message):
    if message.successful_payment.invoice_payload == 'telegram-stars-payment':
        bot.reply_to(message, f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–Ω–∞—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ 50 Telegram –∑–≤–µ–∑–¥!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))

def add_keyboard(message: types.Message, id: str):
    try:
        bot.edit_message_reply_markup(telegram_channel_id, int(id), reply_markup=quick_markup(eval(message.text), 1))
        bot.reply_to(message, f'–ü–æ–ª—É—á–∏–ª–æ—Å—å!')
    except Exception as e:
        bot.reply_to(message, f'–¢—Ä–∞–±–ª..\n{e}')

def get_post_id(message: types.Message):
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏ –∫–æ–Ω—Ñ–∏–≥ –∫–Ω–æ–ø–∫–∏, –±—Ä–æ.')
    bot.register_next_step_handler(message, add_keyboard, message.text)

def make_black_image(message: types.Message):
    if message.document:
        if message.document.file_name[-4:] not in ['.jpg', '.png']:
            bot.reply_to(message, f'–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ `.jpg.` –∏ `.png` —Ñ–∞–π–ª—ã.', parse_mode='Markdown')
        else:
            msg = bot.reply_to(message, f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
            img = bot.download_file(bot.get_file(message.document.file_id).file_path)
            bts = io.BytesIO(img)
            bts_2 = io.BytesIO()
            #random_chislo = random.randint(1, 100)
            random_chislo_2 = random.randint(1, 200)
            #new_img_file = open(path / f'{random_chislo}.jpg', 'wb')
            #new_img_file.write(img)
            #new_img_file.close()
            with Image.open(bts) as file:
                a = file.convert('L')
                #a.save(path / f'{random_chislo_2}.jpg')
                a.save(bts_2, 'JPEG')
                bot.delete_message(message.chat.id, msg.id)
                #file = path / f'{random_chislo_2}.jpg'
                bot.send_photo(message.chat.id, bts_2.getvalue(), '–í–∞—à–µ –∑–∞—Ç–µ–º–Ω–Ω–æ–µ —Ñ–æ—Ç–æ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                #os.remove(file)
                #os.remove(path / f'{random_chislo}.jpg')
    elif message.photo:
            msg = bot.reply_to(message, f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
            img = bot.download_file(bot.get_file(message.photo[0].file_id).file_path)
            bts = io.BytesIO(img)
            bts_2 = io.BytesIO()
            #random_chislo = random.randint(1, 100)
            random_chislo_2 = random.randint(1, 200)
            #new_img_file = open(path / f'{random_chislo}.jpg', 'wb')
            #new_img_file.write(img)
            #new_img_file.close()
            with Image.open(bts) as file:
                a = file.convert('L')
                #a.save(path / f'{random_chislo_2}.jpg')
                a.save(bts_2, 'JPEG')
                bot.delete_message(message.chat.id, msg.id)
                #file = path / f'{random_chislo_2}.jpg'
                bot.send_photo(message.chat.id, bts_2.getvalue(), '–í–∞—à–µ –∑–∞—Ç–µ–º–Ω–Ω–æ–µ —Ñ–æ—Ç–æ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
                #os.remove(file)
                #os.remove(path / f'{random_chislo}.jpg')
    else:
        bot.reply_to(message, f'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Å–∂–∞—Ç–∏—è, –∏–ª–∏ —Å —Å–∂–∞—Ç–∏–µ–º.')


@bot.callback_query_handler(func=lambda call: True)
def pon(call: types.CallbackQuery):
    if check_sub(call.from_user.id):
        if not maintenance['work']:
            if call.data == 'otmena_galya':
                bot.delete_message(call.message.chat.id, call.message.id)
                bot.clear_step_handler_by_chat_id(call.message.chat.id)
                bot.send_message(call.message.chat.id, f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞.', reply_markup=buttons)
                bot.send_message(call.message.chat.id, f'–ï—Å–ª–∏ –º–µ–Ω—é –ø—Ä–æ–ø–∞–¥–µ—Ç.', reply_markup=types.ReplyKeyboardMarkup(True, input_field_placeholder=f'–°—ç—Ä, –¥–∞, —Å—ç—Ä.', row_width=1).add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
            if call.data == 'chat_zaversit':
                bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)
                bot.send_message(call.message.chat.id, f'–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ —Å –í–∞–º–∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è! –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=types.ReplyKeyboardMarkup(True, input_field_placeholder=f'–°—ç—Ä, –¥–∞, —Å—ç—Ä.', row_width=1).add(types.KeyboardButton('üè°–í –º–µ–Ω—é')))
                bot.clear_step_handler_by_chat_id(call.message.chat.id)
            if call.data == 'generate_qr':
                bot.delete_message(call.message.chat.id, call.message.id)
                try:
                    bot.send_animation(call.message.chat.id, give_me_gif, caption='–ù–∞–ø–∏—à–∏ —Å—Å—ã–ª–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ QR –∫–æ–¥.\n–ò–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                except telebot.apihelper.ApiTelegramException:
                    bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏ —Å—Å—ã–ª–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ QR –∫–æ–¥.\n–ò–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, generate_qr__)
            if call.data == 'generate_password':
                symbols = list(string.ascii_letters + string.digits)
                random.shuffle(symbols)
                password = ''.join(symbols[:15])
                random_symbols = ['!', '*', '$', '#', '@']
                psw = password + random.choice(random_symbols)
                bot.edit_message_text(psw, call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            if call.data == 'weather-info':
                bot.delete_message(call.message.chat.id, call.message.id)
                try:
                    bot.send_animation(call.message.chat.id, give_me_gif, caption='–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–º–µ—Ç–∫—É.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                except telebot.apihelper.ApiTelegramException:
                    bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, get_weather)
            if call.data == 'ai-text':
                bot.edit_message_text(f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ?\n–ù–∞–ø–∏—à–∏—Ç–µ `voice`, –∏–ª–∏ `text`.', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, check_ai_result)
                random.shuffle(ideas)
            if call.data == 'ai-image':
                bot.edit_message_text(f'–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –Ω–∞—Ä–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n–ü–∏—à–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "–Ω–∞—Ä–∏—Å—É–π ...".', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, ai_obrabotchik, 1)
                #bot.answer_callback_query(call.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', True)
            if call.data == 'text-to-speech':
                bot.edit_message_text(f'–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ).', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, create_voice_by_text)
            if call.data == 'back':
                bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)
                bot.send_message(call.message.chat.id, f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞.', reply_markup=buttons)
            if call.data == 'help':
                bot.answer_callback_query(call.id, f'–ü—Ä–∏–≤–µ—Ç!\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /support.\n–¢–∞–º –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –§–ª–æ—Ä–µ—Å—Ç–æ–º.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞, —è —ç—Ç–æ –æ—á–µ–Ω—å —Ü–µ–Ω—é.', True)
            if call.data == 'ban-video':
                bot.edit_message_text(f'–í–≤–µ–¥–∏ ID –≤–∏–¥–µ–æ.', call.message.chat.id, call.message.id)
                bot.register_next_step_handler(call.message, ban_video_fl)
            if call.data == 'ban-channel':
                bot.edit_message_text(f'–í–≤–µ–¥–∏ ID –∫–∞–Ω–∞–ª–∞.', call.message.chat.id, call.message.id)
                bot.register_next_step_handler(call.message, ban_channel_fl)
            if call.data == 'add-user-to-txt':
                bot.edit_message_text('–í–≤–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.', call.message.chat.id, call.message.id)
                bot.register_next_step_handler(call.message, add_user_to_txt)
            if call.data == 'group-chat-beta':
                if not check_user(call.from_user.id):
                    if not call.from_user.id in admins:
                        users.append(call.from_user.id)
                        bot.edit_message_text(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —á–∞—Ç–µ: {str(len(users))}', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya_chat')))
                        bot.register_next_step_handler(call.message, message_hndlr)
                        for _ in users:
                            bot.send_message(_, f'–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ - {call.from_user.first_name} ({call.from_user.id})!')
                    else:
                        users.append(call.from_user.id)
                        bot.edit_message_text(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —á–∞—Ç–µ: {str(len(users))}', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya_chat')))
                        bot.register_next_step_handler(call.message, message_hndlr)
                else:
                    send_reaction(call.message.chat.id, call.message.id, "ü§∑")
                    bot.edit_message_text(f'–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç–µ.', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'), types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')))
            if call.data == 'otmena_galya_chat':
                if not call.from_user.id in admins:
                    bot.delete_message(call.message.chat.id, call.message.id)
                    bot.clear_step_handler_by_chat_id(call.message.chat.id)
                    bot.send_message(call.message.chat.id, f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞.', reply_markup=buttons)
                    users.remove(call.from_user.id)
                    for __ in users:
                        bot.send_message(__, f'{call.from_user.first_name} ({call.from_user.id}) –ø–æ–∫–∏–Ω—É–ª(–∞) —á–∞—Ç. –ë—É–¥–µ–º –µ–≥–æ(–µ–µ) –∂–¥–∞—Ç—å –≤–Ω–æ–≤—å!')
                else:
                    bot.delete_message(call.message.chat.id, call.message.id)
                    bot.clear_step_handler_by_chat_id(call.message.chat.id)
                    bot.send_message(call.message.chat.id, f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞.', reply_markup=buttons)
                    users.remove(call.from_user.id)
            if call.data == 'tg-stars_callback':
                bot.delete_message(call.message.chat.id, call.message.id)
                bot.send_invoice(call.message.chat.id, '–î–æ–Ω–∞—Ç –§–ª–æ—Ä–µ—Å—Ç—É', f'–ü—Ä–∏–≤–µ—Ç, —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –§–ª–æ—Ä–µ—Å—Ç—É 50 –∑–≤–µ–∑–¥ Telegram.\n–ó–∞—Ä–∞–Ω–µ–µ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã –∏ –≤—Ä–µ–º—è –Ω–∞ –Ω–∞—Å!', invoice_payload='telegram-stars-payment', prices=[types.LabeledPrice('–î–æ–Ω–∞—Ç –§–ª–æ—Ä–µ—Å—Ç—É', 50)], currency='XTR', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ó–∞–¥–æ–Ω–∏—Ç—å 50 –∑–≤—ë–∑–¥‚≠ê', pay=True)), provider_token='')
            if call.data == 'crypto-wallet':
                bot.delete_message(call.message.chat.id, call.message.id)
                bot.send_message(call.message.chat.id, '–ú–æ–π –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫ USDT$: `UQDBgA8gWE5roashlEzq4FHw9WSibsiPCo7AFQKQnA8d13s8` (—Å–µ—Ç—å: TON)\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–æ–∫–µ–Ω—ã, –∏–ª–∏ —Ç–æ–∫–µ–Ω—ã –¥—Ä—É–≥–∏—Ö —Å–µ—Ç–µ–π, –ø–æ–º–∏–º–æ TON –Ω–∞ –¥–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')), parse_mode='Markdown')
            if call.data == 'add_keyboard_admin_panel':
                bot.edit_message_text('–ö–æ—Ä–æ—á, –≤–≤–µ–¥–∏ ID –ø–æ—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.', call.message.chat.id, call.message.id, reply_markup=None)
                bot.register_next_step_handler(call.message, get_post_id)
            if call.data == 'download-audio-from-youtube':
                bot.edit_message_text(download_music(), call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            if call.data == 'yoomoney-payment':
                bot.delete_message(call.message.chat.id, call.message.id)
                bot.send_message(call.message.chat.id, '–ú–æ–π –ÆMoney –∫–æ—à–µ–ª–µ–∫: `4100118627934427`.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')), parse_mode='Markdown')
            if call.data == 'check_sub':
                if check_sub(call.from_user.id):
                    bot.answer_callback_query(call.id, f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É. –¢–µ–ø–µ—Ä—å, –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /start. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!', True)
                    bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)
                else:
                    bot.answer_callback_query(call.id, f'–û–±–º–∞–Ω—ã–≤–∞—Ç—å - –Ω–µ —Ö–æ—Ä–æ—à–æ!', True)
            if call.data == 'correct':
                if check_sub(call.from_user.id):
                    if call.from_user.id in ids_for_people_who_make_a_victorina:
                        bot.answer_callback_query(call.id, f'–í—ã —É–∂–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –∫—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –í—ã –º–æ–≥–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.', True)
                    else:
                        bot.answer_callback_query(call.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.', True)
                        bot.edit_message_text(f'{call.message.text}\n\n{call.from_user.first_name} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª(–∞) –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö: {str(len(ids_for_people_who_make_a_victorina))}', call.message.chat.id, call.message.id, reply_markup=None)
                        ids_for_people_who_make_a_victorina.clear()
                else:
                    bot.answer_callback_query(call.id, f'–ë—Ä–æ, —è —Ç—É—Ç –∑–∞–º–µ—Ç–∏–ª.. –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–æ–π Telegram –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π —ç—Ç–æ –∏ –Ω–∞–∂–º–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑!', True)
            if call.data == 'incorrect':
                if check_sub(call.from_user.id):
                    if call.from_user.id in ids_for_people_who_make_a_victorina:
                        bot.answer_callback_query(call.id, f'–í—ã —É–∂–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –∫—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –í—ã –º–æ–≥–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.', True)
                    else:
                        bot.answer_callback_query(call.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–±—è –≤ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏—Ç –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫.', True)
                        ids_for_people_who_make_a_victorina.append(call.from_user.id)
                else:
                    bot.answer_callback_query(call.id, f'–ë—Ä–æ, —è —Ç—É—Ç –∑–∞–º–µ—Ç–∏–ª.. –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–æ–π Telegram –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π —ç—Ç–æ –∏ –Ω–∞–∂–º–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑!', True)
            if call.data == 'black-photo-make':
                bot.delete_message(call.message.chat.id, call.message.id)
                try:
                    bot.send_animation(call.message.chat.id, give_me_gif, caption=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∞ JPG, –∏–ª–∏ PNG, –Ω–æ –ª—É—á—à–µ JPG) –±–µ–∑ —Å–∂–∞—Ç–∏—è (—Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏ —Å–∂–∞—Ç–∏–µ–º, –Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ—Ä—á–µ–Ω–∞ –≤ –ø–ª–∞–Ω–µ –∫–∞—á–µ—Å—Ç–≤–∞), –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –º—ã –í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                except telebot.apihelper.ApiTelegramException:
                    bot.send_message(call.message.chat.id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∞ JPG, –∏–ª–∏ PNG, –Ω–æ –ª—É—á—à–µ JPG) –±–µ–∑ —Å–∂–∞—Ç–∏—è (—Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏ —Å–∂–∞—Ç–∏–µ–º, –Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ—Ä—á–µ–Ω–∞ –≤ –ø–ª–∞–Ω–µ –∫–∞—á–µ—Å—Ç–≤–∞), –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –º—ã –í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, make_black_image)
            if call.data == 'full_info_yt':
                bot.delete_message(call.message.chat.id, call.message.id)
                try:
                    bot.send_animation(call.message.chat.id, give_me_gif, caption=f'–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                except telebot.apihelper.ApiTelegramException:
                    bot.send_message(call.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.', parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, get_channel_details)
            if call.data == 'dialog-by-bot':
                bot.edit_message_text(f'–ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –§–ª–æ—Ä–µ—Å—Ç–æ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='leave_chat')))
                bot.register_next_step_handler(call.message, dialog_in_bot)
                bot.send_message(7455363246, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(–ª–∞—Å—å) –∫ —á–∞—Ç—É.\n{call.from_user.id}')
            if call.data == 'leave_chat':
                bot.send_message(7455363246, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} ({call.from_user.id}) –ø–æ–∫–∏–Ω—É–ª(–∞) —á–∞—Ç.')
                bot.delete_message(call.message.chat.id, call.message.id)
                bot.clear_step_handler_by_chat_id(call.message.chat.id)
                bot.send_message(call.message.chat.id, f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞.', reply_markup=buttons)
            if call.data == 'download-video-from-yt':
                bot.delete_message(call.message.chat.id, call.message.id)
                try:
                    bot.send_animation(call.message.chat.id, give_me_gif, caption=f'–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube.\n–û–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –¥–ª–∏—Ç—å—Å—è –±–æ–ª–µ–µ 1 —á–∞—Å–∞.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                except telebot.apihelper.ApiTelegramException:
                    bot.send_message(call.message.chat.id, f'–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube.\n–û–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –¥–ª–∏—Ç—å—Å—è –±–æ–ª–µ–µ 1 —á–∞—Å–∞.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, download_youtube_video_func)
            if call.data == 'demotivator-create':
                bot.delete_message(call.message.chat.id, call.message.id)
                try:
                    bot.send_animation(call.message.chat.id, give_me_gif, caption='–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–π –º—ã —Å–¥–µ–ª–∞–µ–º –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                except telebot.apihelper.ApiTelegramException:
                    bot.send_message(call.message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–π –º—ã —Å–¥–µ–ª–∞–µ–º –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, image_priem_to_demotivator)
            if call.data == 'predloshka':
                bot.edit_message_text(f'–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç –§–ª–æ—Ä–µ—Å—Ç—É –≤ @florestchannel.\n–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–¥–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∏–∂–µ.\n\n> –ó–∞–ø—Ä–µ—â–µ–Ω —à–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç.\n> –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ–±—Å—É–∂–¥–∞—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ/—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ/—ç—Ç–Ω–∏—á–µ—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã –≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –∫–ª—é—á–µ.\n> –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ª–µ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.\n> –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∏–¥–µ–æ–ª–æ–≥–∏–π.\n> –ó–∞–ø—Ä–µ—â–µ–Ω—ã –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü—Ä–∞–≤–∏–ª–∞ –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏.', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('–°–æ–≥–ª–∞—Å–µ–Ω', callback_data='sogl'), types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            if call.data == 'sogl':
                bot.edit_message_text(f'–û—Ç–ª–∏—á–Ω–æ! –¢—ã —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.\n–¢–µ–ø–µ—Ä—å, –Ω–∞—á–Ω–∏ –ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç.\n–í–æ—Ç, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø–æ—Å—Ç–µ: —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è, –º—É–∑—ã–∫–∞, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ (–±–µ–∑ —Å–∂–∞—Ç–∏—è).', call.message.chat.id, call.message.id)
                bot.register_next_step_handler(call.message, post_create)
            if call.data == 'search_youtube_video':
                bot.delete_message(call.message.chat.id, call.message.id)
                try:
                    bot.send_animation(call.message.chat.id, give_me_gif, caption='–í–≤–µ–¥–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç—É.\n–ú—ã –ø—Ä–∏—à–ª–µ–º –í–∞–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –Ω–∞ –Ω–µ–º –Ω–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∏–ª–∏ –æ–Ω–æ –Ω–µ –¥–ª–∏—Ç—å—Å—è –±–æ–ª–µ–µ 1 —á–∞—Å–∞.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                except telebot.apihelper.ApiTelegramException:
                    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç—É.\n–ú—ã –ø—Ä–∏—à–ª–µ–º –í–∞–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –Ω–∞ –Ω–µ–º –Ω–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∏–ª–∏ –æ–Ω–æ –Ω–µ –¥–ª–∏—Ç—å—Å—è –±–æ–ª–µ–µ 1 —á–∞—Å–∞.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, search_by_query)
            if call.data == 'information_about_ip':
                bot.delete_message(call.message.chat.id, call.message.id)
                try:
                    bot.send_animation(call.message.chat.id, give_me_gif, caption='–ü—Ä–∏—à–ª–∏ –º–Ω–µ IP –∞–¥—Ä–µ—Å —á–µ–ª–æ–≤–µ–∫–∞.\n–ü—Ä–æ—à—É –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –±–∞–∑–æ–≤–æ–π, –∞ —Ç–∞–∫–∂–µ –æ–Ω–∞ –±—ã–ª–∞ –≤–∑—è—Ç–∞ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Ç.–µ. –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç –∑–∞–∫–æ–Ω, –∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ Telegram.\n–í—ã —Å–∞–º–∏ –±–µ—Ä–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                except telebot.apihelper.ApiTelegramException:
                    bot.send_message(call.message.chat.id, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ IP –∞–¥—Ä–µ—Å —á–µ–ª–æ–≤–µ–∫–∞.\n–ü—Ä–æ—à—É –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –±–∞–∑–æ–≤–æ–π, –∞ —Ç–∞–∫–∂–µ –æ–Ω–∞ –±—ã–ª–∞ –≤–∑—è—Ç–∞ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Ç.–µ. –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç –∑–∞–∫–æ–Ω, –∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ Telegram.\n–í—ã —Å–∞–º–∏ –±–µ—Ä–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, deanon_by_ip_tg)
            if call.data == 'crypto-price':
                bot.delete_message(call.message.chat.id, call.message.id)
                bot.send_message(call.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç—É.', reply_markup=types.ReplyKeyboardMarkup(row_width=1).add(types.KeyboardButton('USDT'), types.KeyboardButton('BTC'), types.KeyboardButton('DOGE'), types.KeyboardButton('HMSTR')))
                try:
                    bot.send_animation(call.message.chat.id, give_me_gif, caption='–ó–¥–µ—Å—å, —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ RUB –∑–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç—ã –Ω–∏–∂–µ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                except:
                    bot.send_message(call.message.chat.id, '–ó–¥–µ—Å—å, —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ RUB –∑–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç—ã –Ω–∏–∂–µ.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, crypto_info)
            if call.data == 'sogl_group_rules':
                if bot.get_chat_member(group_id, call.from_user.id).status == 'left':
                    if not check_sub(call.from_user.id):
                        bot.answer_callback_query(call.id, f'–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ Telegram –∫–∞–Ω–∞–ª!\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n–¢–ì–ö: @florestchannel', True)
                    else:
                        bot.answer_callback_query(call.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –Ω–∞–º! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.', True)
                        bot.approve_chat_join_request(group_id, call.from_user.id)
                        bot.send_photo(group_id, requests.get('https://cdn.discordapp.com/attachments/1246363653385752576/1309476788715388988/sticker_021307.webp?ex=6741b8cb&is=6740674b&hm=2f6c6e3f5533ac8ecdeb805cd7b957c7121cb27dd4bcc9ee843b1bb4be73159b&', headers=headers_for_html_requests, proxies=proxies).content, caption=f'–ü—Ä–∏–≤–µ—Ç\, [{call.from_user.full_name}](tg://openmessage?user_id={call.from_user.id})\.\n–ó–¥–µ—Å—å\, —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\.\n–°–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã\.\n–ù–∞—Å —É–∂–µ {str(bot.get_chat_member_count(group_id))} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚ù§\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [–≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É](tg://openmessage?user_id=7389388731)\.', parse_mode='MarkdownV2')
                else:
                    bot.answer_callback_query(call.id, f'–ë—Ä–∞—Ç–æ–∫, —ç—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ!\n–î–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.', True)
                    bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)
            if call.data == 'password_check':
                bot.edit_message_text(f'–í–≤–µ–¥–∏ –Ω–∏–∫, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ –∏—Å–∫–∞—Ç—å —É—Ç–µ—á–∫–∏.', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, password_check)
            if call.data == 'nitro-generator':
                bot.edit_message_text(f'–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –∫–ª—é—á–µ–π –æ—Ç Discord Nitro - –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n–ö–ª—é—á–∏ –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–æ–π—Ç–∏, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –Ω–∞–¥–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑.', call.message.chat.id, call.message.id)
                generate_nitro(call.message.chat.id, call.message.id)
            if call.data == 'fake_human':
                bot.answer_callback_query(call.id, f'–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–∏—á–Ω–æ—Å—Ç—å..', False)
                bot.edit_message_text(generate_human(), call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            if call.data == 'gen_info-btns':
                bot.edit_message_text(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–∞—Ä–æ–ª–∏, –ø—Ä–æ–∫—Å–∏, —Ñ–µ–π–∫–æ–≤—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏, –ò–ù–ù –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.', call.message.chat.id, call.message.id, reply_markup=gen_info_btns)
            if call.data == 'deanon_btns':
                bot.edit_message_text(f'–ü—Ä–æ–±–∏–≤—á–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–µ–≥–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã, –Ω–µ –Ω–∞—Ä—É—à–∞–µ–º –∑–∞–∫–æ–Ω –∏ –ø—Ä–∞–≤–∏–ª–∞ —Ç–≥.', call.message.chat.id, call.message.id, reply_markup=deanon_btns)
            if call.data == 'utilits_btns':
                bot.edit_message_text(f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞. –ü–æ–≥–æ–¥–∞, –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä—ã, –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.', call.message.chat.id, call.message.id, reply_markup=utilits_btns)
            if call.data == 'ai_btns':
                bot.edit_message_text(f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç–∞ (–Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç) –∏ —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å (TTS).', call.message.chat.id, call.message.id, reply_markup=ai_btns)
            if call.data == 'youtube_funcs_btns':
                bot.edit_message_text(f'–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ YouTube –∫–∞–Ω–∞–ª–µ, –ø–æ–∏—Å–∫ –≤–∏–¥–µ–æ –∏ —Ç.–¥.', call.message.chat.id, call.message.id, reply_markup=youtube_btns)
            if call.data == 'back_to_menu':
                bot.edit_message_text(f'–£—Ç–∏–ª–∏—Ç—ã –±–æ—Ç–∞.', call.message.chat.id, call.message.id, reply_markup=buttons)
            if call.data == 'deanon_by_photo':
                bot.delete_message(call.message.chat.id, call.message.id)
                try:
                    bot.send_animation(call.message.chat.id, give_me_gif, caption='–î–∞–π –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –¥–µ–∞–Ω–æ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                except:
                    bot.send_message(call.message.chat.id, '–î–∞–π –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –¥–µ–∞–Ω–æ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, deanonchik_photo)
            if call.data == 'imt_check':
                bot.delete_message(call.message.chat.id, call.message.id)
                try:
                    bot.send_animation(call.message.chat.id, give_me_gif, caption='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                except:
                    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, imt_check_kg)
            if call.data == 'write_to_user_without_nickname':
                bot.edit_message_text(F"–í–≤–µ–¥–∏ ID —é–∑–µ—Ä–∞.\n–ì–¥–µ –µ–≥–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å?\n–°–∫–∞—á–∞–π—Ç–µ Ayugram —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –∞ –∑–∞—Ç–µ–º –∑–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∫ —á–µ–ª–æ–≤–µ–∫—É. –í–Ω–∏–∑—É –±—É–¥–µ—Ç –µ–≥–æ ID.\n–õ–∏–±–æ –∑–∞–π–¥–∏—Ç–µ –≤ @username_to_id_bot –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"User\". –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.", call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya'))
                bot.register_next_step_handler(call.message, write_to_user_without_nickname)
            if call.data == 'send-mail-by-bot':
                bot.edit_message_text('–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ—á—Ç—É.\n–í–≤–µ–¥–∏ —Ç–µ–º—É –ø–∏—Å—å–º–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫).', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, get_email_title)
            if call.data == 'virus-check':
                bot.edit_message_text('–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–π –Ω–æ–≤–∏–Ω–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤–∏—Ä—É—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ.\n–û–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∞—Ä—Ö–∏–≤—ã, –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–ª—å–∑—è.\n–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã 20 –ú–ë –∏ –º–µ–Ω—å—à–µ.', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, virus_check)
            if call.data == 'parsing-site':
                bot.edit_message_text(f'–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å —Å–∞–π—Ç.\n–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —Ñ–∞–π–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º –Ω–∞ —è–∑—ã–∫–µ HTML5.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º.', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, parsing_site_fl)
            if call.data == 'google-photo-parsing':
                bot.edit_message_text(f'–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å —Ñ–æ—Ç–æ —Å Google Photo.\n–ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, google_photo_parsing)
            if call.data == 'speech-to-text':
                bot.edit_message_text(f'–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –æ —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç —á–µ–ª–æ–≤–µ–∫ –≤ —Å–≤–æ–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏/–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–∏, –∏–ª–∏ –≤ –≤–∏–¥–µ–æ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º.\n–§—É–Ω–∫—Ü–∏—è –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Google Speech API.\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.\n–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –≤–∏–¥–µ–æ (–º–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç).', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, speech_to_text)
            if call.data == 'make-email-rassylka':
                bot.edit_message_text(f'–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–æ—á—Ç.\n–ú–∞–∫—Å–∏–º—É–º –ø–æ—á—Ç –∑–∞ —Ä–∞–∑: 50 –ø–æ—á—Ç.\n–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ `florestbotfunctions` –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ—Ç.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–æ—á—Ç –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–∞–∂–¥–∞—è –ø–æ—á—Ç–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ), –ª–∏–±–æ .txt –¥–æ–∫—É–º–µ–Ω—Ç–æ–º (—Ç–∞–∫–∂–µ, –∫–∞–∂–¥–∞—è –ø–æ—á—Ç–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ).', call.message.chat.id, call.message.id, parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, priem_emails_LOL)
            if call.data == 'cpp_compiler':
                bot.edit_message_text(f'–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –¥–ª—è C++!\n–ù–µ –Ω–∞–¥–æ –∫–∞—á–∞—Ç—å G++, –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã –Ω–∞ —Å–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n–ö–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Ñ–ª–∞–≥–æ–≤. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è.\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã: `.cpp`, `.cxx`.', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')), parse_mode='Markdown')
                bot.register_next_step_handler(call.message, cpp_compiler)
            if call.data == 'vk_music_download':
                bot.edit_message_text(f'–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö VK –º—É–∑—ã–∫–∏!\n–ò–ª–∏ "–∞–≤—Ç–æ—Ä - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏" –¥–ª—è –ª—É—á—à–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏!', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, vk_music_download)
            if call.data == 'last_post_vk':
                bot.edit_message_text(f'–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã—Å–ª–∞—Ç—å –ø–æ—Å—Ç.\n–ü—Ä–∏–º–µ—Ä: –§–ª–æ—Ä–µ—Å—Ç | –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, last_post_vk)
            if call.data == 'yandex_beta_parse':
                bot.edit_message_text(f'–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏—Ç Yandex –∫–∞—Ä—Ç–∏–Ω–∫–∏, –≤ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ, –∑–∞—Ç–µ–º —Å–∫–∏–¥—ã–≤–∞–µ—Ç –≤–∞–º .zip –∞—Ä—Ö–∏–≤ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏.\n\n–ü–æ –∫–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∏—Å–∫–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏?', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, get_query_p)
            if call.data == 'make-face-pixel-censor':
                bot.edit_message_text(f'–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ .JPG —Ñ–∞–π–ª–æ–º (–±–µ–∑ —Å–∂–∞—Ç–∏—è).\n\n*–§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ APLHA, –º–æ–≥—É—Ç –±—ã—Ç—å –ª–∞–≥–∏. –ë–ª—é—Ä –º–æ–∂–µ—Ç –ø–æ–∫—Ä—ã—Ç—å 90% –ª–∏—Ü–∞, –∏–ª–∏ –º–µ–Ω—å—à–µ.', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, face_obrab_func)
            if call.data == 'create-sticker-pack-with-florestik':
                bot.edit_message_text(f'–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–æ–≤ –≤ Telegram.\n–ü–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è `.zip` –∞—Ä—Ö–∏–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ `.png` –∏ `webm`.\n\n–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫?', call.message.chat.id, call.message.id, parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, get_title_stickerpack)
            if call.data == 'games':
                bot.edit_message_text('–ú–∏–Ω–∏-–∏–≥—Ä—ã –≤ –º–æ–µ–º –±–æ—Ç–µ, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–Ω–æ–π.', call.message.chat.id, call.message.id, reply_markup=games)
            if call.data == 'get-api-token':
                q = requests.get(f'https://florestapi-florestdev4185.amvera.io/admin/create_new_api_key?id={call.from_user.id}', headers={"Key":"&hdkakak&1ndnsjak&jdkkaldla0010", 'User-Agent':"FlorestBotCalling"})
                if q.status_code == 503:
                    bot.answer_callback_query(call.id, f'API –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', True)
                r = q.json()
                if 'error' in r:
                    bot.answer_callback_query(call.id, f'–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ API –∫–ª—é—á.', True)
                else:
                    bot.answer_callback_query(call.id, f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ! –ö–ª—é—á –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑.', True)
                    bot.edit_message_text(f'–í–∞—à API –∫–ª—é—á: {r["api_key"]}\n–ù–∞–¥–æ –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (header) - `Api-Token`.\n–°—Å—ã–ª–∫–∞ –Ω–∞ API: https://florestapi-florestdev4185.amvera.io/', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
            if call.data == 'info-about-minecraft-server':
                bot.edit_message_text(f'–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Java-—Å–µ—Ä–≤–µ—Ä–µ –≤ Minecraft.\n–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞, –∏–ª–∏ IP+port (–ø—Ä–∏–º–µ—Ä: 111.111.111.111:25565), –∏–ª–∏ –¥–æ–º–µ–Ω.', call.message.chat.id, call.message.id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='otmena_galya')))
                bot.register_next_step_handler(call.message, info_about_minecraft_server)
        else:
            bot.answer_callback_query(call.id, f'–ü—Ä–∏–≤–µ—Ç, –±—Ä–∞—Ç–µ—Ü!\n–°–µ–π—á–∞—Å –∏–¥—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {maintenance["reason"]}\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ {maintenance["time"]}.', True)
    else:
        bot.answer_callback_query(call.id, f'–≠—ç—ç. –ê –Ω–∞ –¢–ì–ö –ø–æ–¥–ø–∏—Å–æ–Ω—á–∏–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å?(\n–ö–∞–Ω–∞–ª: @florestchannel', True)

bot.infinity_polling(timeout=7200)
